{"version":3,"sources":["login/loginGuard.js","account/accountSettingsSlice.js","regex.js","currentConversation/conversationsSlice.js","topbar/inviteSlice.js","account/friendsSlice.js","uiSlice.js","auth/authSlice.js","store/store.js","login/loginScreen.js","lazyModules/login.js","sidebar/windowSize.js","account/ForgotPassword.js","lazyModules/forgotPassword.js","account/CreateAccount.js","lazyModules/createAccount.js","socket/chatSocket.js","currentConversation/CurrentConversationMessageBox.js","currentConversation/CurrentConversationMessagesListView.js","currentConversation/CurrentConversationContainer.js","sidebar/Sidebar.js","lazyModules/home.js","socket/notificationSocket.js","newConversation/SetPWModal.js","newConversation/NewConversation.js","lazyModules/newConversation.js","account/Modals/About.js","account/Modals/ChangeTagname.js","account/Modals/DeleteAccount.js","account/Modals/Privacy.Security.Disclaimer.js","account/Modals/ResetPW.js","account/Settings.js","lazyModules/settings.js","App.js","topbar/ListItems.js","topbar/Dropdowns.js","topbar/TopBar.js","index.js"],"names":["GuardedRoute","Component","component","auth","rest","render","props","to","accountSlice","createSlice","name","initialState","email","tagName","loggedIn","id","reducers","clearAccount","state","setEmail","action","payload","setTagName","login","logout","setId","actions","selectAccount","account","tagNameSearch","password","firstName","lastName","messageBody","conversationName","conversationsSlice","conversations","currentConversation","messages","joined","typing","defaultView","showConvList","clearConversations","addConversation","filter","conv","conversation","length","console","log","push","removeConversation","setCurrentConversation","addMessage","convs","produce","draftState","Array","isArray","message","numberOfMessages","msg","removeMessage","conversationId","messageId","setJoined","setRead","el","convId","read","setTyping","setView","setShowConvList","sortMessages","sort","a","b","Date","parse","createdAt","pinMessage","pinned","batchAddMessages","selectConversations","selectCurrentConversation","selectView","selectShowConvList","inviteSlice","sentInvites","receivedInvites","acceptedInvites","clearInvites","addSentInvite","addReceivedInvite","removeSentInvite","removeReceivedInvite","addAcceptedInvite","selectReceived","invite","friendsSlice","friends","friendRequests","clearFriends","addFriend","friend","removeFriend","addFriendRequest","req","removeFriendRequest","declineRequest","request","cancelled","acceptRequest","accepted","selectFriends","selectFriendRequests","sidebarStates","uiSlice","sidebarState","topbarMessage","accountBackground","backgroundColor","backgroundTint","conversationBackground","setSidebarState","setTopbarMessage","setDefaultBackground","defaultBackground","setColor","setTint","setConversationBackground","selectSidebarState","ui","selectTopbarMessage","authSlice","username","token","setUserName","setToken","clearAuth","selectToken","globalSlice","devHost","prodHost","testHost","metadata","api","refreshExpire","setMetadata","setRefreshExpire","selectHost","globals","selectRefreshExpire","reducer","configureStore","authReducer","conversationsReducer","accountReducer","inviteReducer","friendsReducer","uiReducer","loginServer","fetch","body","JSON","stringify","headers","method","response","json","statusCode","user","invites","refreshToken","validateAccountDetails","LoginScreen","useState","userName","_setUserName","_setPassword","allowLogin","setAllowLogin","error","setError","errorMsgs","setErrorMsgs","dispatch","useDispatch","useSelector","spinning","setSpinning","loggingInCookie","setLoggingInCookie","focusRef","useRef","useEffect","current","focus","credentials","refreshResult","res","now","addAccountToStore","checkInput","passing","regex","test","submit","result","map","pending","recipientId","Container","className","fluid","Row","Col","style","borderRadius","opacity","maxWidth","marginBottom","Spinner","animation","height","width","variant","InputGroup","FormControl","marginLeft","marginRight","color","minHeight","border","placeholder","aria-label","aria-describedby","onKeyPress","e","key","onChange","target","value","ref","type","Button","onClick","document","getElementById","click","textDecoration","size","marginTop","block","disabled","err","fontSize","LoginComponent","useWindowSize","undefined","windowSize","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","ForgotPassword","tagname","setTagname","emailInvalid","setEmailInvalid","tagnameInvalid","setTagnameInvalid","arr","listStyleType","paddingRight","ForgotPW","CreateAccount","pw1","setPW1","pw2","setPW2","backToLogin","setBackToLogin","passwordNoMatch","setPasswordNoMatch","pw1Invalid","setPw1Invalid","pw2Invalid","setPw2Invalid","bd","session","CreateAcc","chatSocket","socketEvents","received","connectSuccess","connectError","delivered","deliveryError","readReceipt","listening","unlistened","unlistenError","currentConversationUpdate","setCurrentConversationError","refreshSuccess","refreshError","messagePinned","messagePinnedError","sent","connect","disconnect","chatToServer","readMessage","listen","unlisten","ChatSocket","host","useCookies","io","transportOptions","polling","extraHeaders","forceNew","on","room","socketId","toast","info","position","hideProgressBar","pauseOnHover","clientId","data","emit","listenAllRooms","userId","refresh","Object","keys","off","close","searchTimeout","CurrentConversationMessageBox","setMessage","formRef","typingTimeout","setTypingTimeout","setPending","sendMessage","sender","sendTyping","isTyping","onkeypress","clearTimeout","setTimeout","bottom","left","minWidth","paddingLeft","Append","SendRounded","xs","weekdays","MessageDropdown","sentByMe","deleteMessage","Dropdown","drop","Toggle","as","Menu","Item","preventDefault","stopPropagation","getDateMetaData","date","hour","getHours","min","getMinutes","pm","day","getTime","getDay","minsAgo","MessageMe","isBottom","showMenu","setShowMenu","Math","random","onMouseLeave","onMouseEnter","Typography","display","wordWrap","alert","toFixed","MessageOther","maxHeight","MessageListItem","CurrentConversationMessagesListView","setIsTyping","setMessages","loadingMessages","setLoadingMessages","colRef","rowHeight","isNaN","lazyLoadMessages","URLSearchParams","beforeDate","number","messageResult","handleScroll","scrollTop","scrollHeight","onScroll","paddingBottom","paddingTop","overflowY","idx","whiteSpace","CurrentConversationContainer","useStyles","makeStyles","theme","animate_in","visibility","flexShrink","animationName","animationDuration","animate_out","narrowPaper","hidePaper","fullDrawerPaper","drawerContainer","overflowX","ConversationListItem","selectConversation","deleteConversation","selected","buttonMargin","ListItem","toLocaleString","Sidebar","classes","narrowScreen","filteredConversations","setFilteredConversations","searchBar","setSearchBar","history","useHistory","location","useLocation","searchScreen","setSearchScreen","deleted","setDeleted","pathname","index","self","indexOf","listItemMinWidth","getMinWidthListItem","getButtonMargin","Drawer","paper","Toolbar","List","textAlign","autoComplete","Tooltip","title","anyConvs","includes","searchChatNames","SearchOutlined","Home","notificationSocket","PasswordModalBody","handleSetConvPassword","pw","setPW","setPwRef","borderBottom","EnterChatName","setConversationName","errorName","enterChatRef","AddFriends","errorSearch","selectedFriends","setSelectedFriends","setErrorSearch","setButtonsDisabled","filteredFriends","setFilteredFriends","handleCheck","checked","fr","filterList","cursor","FriendListItemCheckBox","onCheck","setChecked","padding","NewConversation","setErrorName","buttonsDisabled","newName","passwordOpened","setPasswordOpened","setConvPassword","wide","friendTag","otherUsers","users","margin","Modal","open","onClose","aria-labelledby","NewConversationScreen","About","ChangeTagname","logoutAccount","newTagname","setNewTagname","tagNameError","setTagnameError","DeleteAccount","PrivacySecurityDisclaimer","ResetPW","Settings","success","successMsg","aboutOpened","setAboutOpened","deleteAccOpened","setDeleteAccOpened","privacyOpened","setPrivacyOpened","resetPWOpened","setResetPWOpened","changeTagnameOpened","setChangeTagnameOpened","SettingScreen","App","successful","CookiesProvider","path","NewConv","SettingScr","FriendListItem","isOnline","friendAction","FriendRequestListItem","requestId","friendRequestId","ReceivedInviteListItem","inviteId","substring","AcceptedInviteListItem","tag","setTag","FriendsDropdown","addFriendInput","setAddFriendInput","searchFriendInput","setSearchFriendInput","setSuccess","searchError","setSearchError","addError","setAddError","checkAddFriendInput","searchFriends","sendFriendRequest","senderId","ItemText","convsWithFriend","NotificationsDropdown","_acceptedInvites","Badge","overlap","badgeContent","Tabs","defaultActiveKey","Tab","eventKey","SettingsDropdown","querySelector","root","flexGrow","appBar","zIndex","drawer","menuButton","spacing","menu","StartChatButton","view","boxShadow","TopBar","screenSmall","showConv","CssBaseline","AppBar","IconButton","edge","renderas","ReactDOM","StrictMode","store","basename","fallback"],"mappings":"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","file":"static/js/main.79abfae2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nconst GuardedRoute = ({ component: Component, auth, ...rest }) => (\r\n    <Route {...rest} render={(props) => (\r\n        auth === true\r\n            ? <Component {...props} />\r\n            : <Redirect to='/login' />\r\n    )} />\r\n)\r\n\r\nexport default GuardedRoute;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const accountSlice = createSlice({\r\n  name: 'account',\r\n  initialState: {\r\n    email: \"\",\r\n    tagName: \"\",\r\n    loggedIn: false,\r\n    id: \"\"\r\n  },\r\n  reducers: {\r\n    clearAccount: (state) => {\r\n      state.email = \"\";\r\n      state.tagName = \"\";\r\n      state.loggedIn = false;\r\n      state.id = \"\";\r\n    },\r\n    setEmail: (state, action) => {\r\n        state.email = action.payload\r\n    },\r\n    setTagName: (state, action) => {\r\n        state.tagName = action.payload\r\n    },\r\n    login: state => {\r\n        state.loggedIn = true\r\n    },\r\n    logout: state => {\r\n        state.loggedIn = false\r\n    },\r\n    setId: (state, action) => {\r\n        state.id = action.payload\r\n    }\r\n  },\r\n});\r\n\r\nexport const { clearAccount, setId, setEmail, setTagName, login, logout } = accountSlice.actions;\r\n\r\nexport const selectAccount = state => {\r\n  return {\r\n    id: state.account.id,\r\n    email: state.account.email,\r\n    tagName: state.account.tagName,\r\n    loggedIn: state.account.loggedIn\r\n   }\r\n};\r\n\r\nexport default accountSlice.reducer;\r\n","export default {\r\n    tagNameSearch: /^([a-zA-Z0-9_-]){1,20}$/,\r\n    tagName: /^([a-zA-Z0-9_-]){8,20}$/,\r\n    password: /^([a-zA-Z0-9\\_\\-\\$\\#\\%\\^\\&\\*\\(\\)]){8,32}$/,\r\n    email: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/,\r\n    firstName: /^([A-Z]){1}([a-zA-Z]){1,32}$/,\r\n    lastName: /^([A-Z]){1}([a-zA-Z]){1,32}$/,\r\n    messageBody: /^(.){1,200}$/,\r\n    conversationName: /^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]){4,64}$/\r\n};","import { createSlice } from '@reduxjs/toolkit';\r\nimport produce from 'immer'; \r\n\r\nexport const conversationsSlice = createSlice({\r\n  name: 'conversations',\r\n  initialState: {\r\n    conversations: [],\r\n    currentConversation: { messages: [], joined: false, typing: false, id: 0 },\r\n    defaultView: true,\r\n    showConvList: false\r\n  },\r\n  reducers: {\r\n    clearConversations: (state) => {\r\n        state.conversations = [];\r\n        state.currentConversation = { messages: [], joined: false, typing: false, id: 0 };\r\n        state.defaultView = true;\r\n        state.showConvList = false;\r\n    },\r\n    addConversation: (state, action) => {\r\n        if(state.conversations.filter(conv => conv.id === action.payload.conversation.id).length  > 0) {\r\n            console.log(\"Error: cannot add conversation because one already exists in store\");\r\n            return;\r\n        }\r\n        state.conversations.push(action.payload.conversation);\r\n    },\r\n    removeConversation: (state, action) => {\r\n        state.conversations = state.conversations.filter((conv) => { return conv.id !== action.payload.id});\r\n    },\r\n    setCurrentConversation: (state, action) => {\r\n        if(state.conversations.filter(conv => conv.id === action.payload.conversation.id).length < 1) {\r\n            console.log(\"Error: cannot set current conversation to a conversation that doesn't exist in the store\");\r\n            return;\r\n        }\r\n        state.currentConversation = action.payload.conversation;\r\n    },\r\n    addMessage: (state, action) => {\r\n        const convs = produce(state.conversations, draftState => {});\r\n        for(let conv of convs){\r\n            if(conv.id === action.payload.conversation.id){\r\n                if(!Array.isArray(conv.messages)){\r\n                    console.log(\"Messages don't exist yet\");\r\n                    conv.messages = [];\r\n                    conv.messages.push(action.payload.message);\r\n                    if(conv.numberOfMessages < conv.messages.length) {\r\n                        conv.numberOfMessages = conv.messages.length;\r\n                    }\r\n                    break; \r\n                }\r\n                if(conv.messages.filter(msg => msg.id === action.payload.message.id).length > 0) {\r\n                    console.log(\"Error: Cannot add message because it already exists in the state!\");\r\n                    break;\r\n                }\r\n                if(conv.id === state.currentConversation.id){\r\n                    if(!Array.isArray(state.currentConversation.messages) || !state.currentConversation.messages) {\r\n                        state.currentConversation.messages = []\r\n                    } \r\n                    state.currentConversation.messages.push(action.payload.message);\r\n                    if(state.currentConversation.numberOfMessages <  state.currentConversation.messages.length) {\r\n                        state.currentConversation.numberOfMessages =  state.currentConversation.messages.length;\r\n                    }\r\n                    break;\r\n                }\r\n                if(Array.isArray(conv.messages)){\r\n                    conv.messages.push(action.payload.message);\r\n                    if(conv.numberOfMessages < conv.messages.length) {\r\n                        conv.numberOfMessages = conv.messages.length;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        state.conversations = produce(convs, draftState => {});\r\n    },\r\n    removeMessage: (state, action) => {\r\n        const { conversationId, messageId } = action.payload;\r\n        if(state.currentConversation = conversationId) {\r\n            state.currentConversation.messages = state.currentConversation.messages.filter(msg => msg.id !== messageId);\r\n        } \r\n        for(let conv of state?.conversations) {\r\n            if(conv.id === conversationId){\r\n                conv.messages = conv.messages.filter(msg => msg.id !== messageId); \r\n            }\r\n        }\r\n    },\r\n    setJoined: (state, action) => {\r\n        state.currentConversation.joined = action.payload\r\n    },\r\n    setRead: (state, action) => {\r\n        const conv = state.conversations.filter(el => el.id === action.payload.convId)[0];\r\n        if(conv){\r\n            const message = conv.messages.filter(el => el.id === action.payload.messageId)[0];\r\n            if(message){\r\n                message.read = true;\r\n            }\r\n        }\r\n    },\r\n    setTyping: (state, action) => {\r\n        state.currentConversation.typing = action.payload\r\n    },\r\n    setView: (state, action) => {\r\n        state.defaultView = action.payload\r\n    },\r\n    setShowConvList: (state, action) => {\r\n        state.showConvList = action.payload\r\n    },\r\n    sortMessages: (state, action) => {\r\n        if(state.currentConversation.messages.length > 1) \r\n            state.currentConversation.messages.sort((a, b) =>  Date.parse(a.createdAt) - Date.parse(b.createdAt));\r\n    },\r\n    pinMessage: (state, action) => {\r\n        for(let conv of state.conversations) {\r\n            if(action.payload.conversation.id === conv.id) {\r\n                for(let msg of conv.messages) {\r\n                    if(msg.id === action.payload.id){\r\n                        msg.pinned = action.payload.pinned;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    batchAddMessages: (state, action) => {\r\n        const { messages, conversationId } = action.payload; \r\n        for(let message of messages) {\r\n            if(message.conversation.id === state.currentConversation.id && \r\n                state.currentConversation.id === conversationId) {\r\n                state.currentConversation.messages.push(message); \r\n                if(state.currentConversation.numberOfMessages <  state.currentConversation.messages.length) {\r\n                    state.currentConversation.numberOfMessages =  state.currentConversation.messages.length;\r\n                }\r\n            } \r\n        }\r\n    }\r\n  }\r\n});\r\n\r\nexport const { batchAddMessages, removeMessage, sortMessages, setShowConvList, clearConversations, setView, setTyping, setRead, setJoined, addMessage, setCurrentConversation, addConversation, removeConversation, pinMessage } = conversationsSlice.actions;\r\n\r\nexport const selectConversations = state => state.conversations.conversations;\r\nexport const selectCurrentConversation = state => state.conversations.currentConversation;\r\nexport const selectJoined = state => state.conversations.currentConversation.joined;\r\nexport const selectTyping = state => state.conversations.currentConversation.typing;\r\nexport const selectView = state => state.conversations.defaultView;\r\nexport const selectShowConvList = state => state.conversations.showConvList;\r\n\r\nexport default conversationsSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const inviteSlice = createSlice({\r\n  name: 'invite',\r\n  initialState: {\r\n    sentInvites: [],\r\n    receivedInvites: [],\r\n    acceptedInvites: []\r\n  },\r\n  reducers: {\r\n    clearInvites: (state) => {\r\n        state.sentInvites = []\r\n        state.receivedInvites = []\r\n        state.acceptedInvites = []\r\n    },\r\n    addSentInvite: (state, action) => {\r\n        state.sentInvites.push(action.payload)\r\n    },\r\n    addReceivedInvite: (state, action) => {\r\n        state.receivedInvites.push(action.payload)\r\n    },\r\n    removeSentInvite: (state, action) => {\r\n        state.sentInvites = state.sentInvites.filter(el => el.id !== action.payload)\r\n    },\r\n    removeReceivedInvite: (state, action) => {\r\n        state.receivedInvites = state.receivedInvites.filter(el => el.id !== action.payload)\r\n    },\r\n    addAcceptedInvite: (state, action) => {\r\n        state.acceptedInvites.push(action.payload)\r\n    }\r\n  },\r\n});\r\n\r\nexport const { clearInvites, addSentInvite, addReceivedInvite, removeSentInvite, removeReceivedInvite, addAcceptedInvite } = inviteSlice.actions;\r\n\r\n// // The function below is called a thunk and allows us to perform async logic. It\r\n// // can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// // will call the thunk with the `dispatch` function as the first argument. Async\r\n// // code can then be executed and other actions can be dispatched\r\n// export const incrementAsync = amount => dispatch => {\r\n//   setTimeout(() => {\r\n//     dispatch(incrementByAmount(amount));\r\n//   }, 1000);\r\n// };\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectSent = state => state.invite.sentInvites;\r\nexport const selectReceived = state => state.invite.receivedInvites;\r\nexport const acceptedInvites = state => state.invite.acceptedInvites;\r\n\r\nexport default inviteSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const friendsSlice = createSlice({\r\n  name: 'friends',\r\n  initialState: {\r\n    friends: [],\r\n    friendRequests: []\r\n  },\r\n  reducers: {\r\n    clearFriends: (state) => {\r\n       state.friendRequests = []\r\n       state.friends = []\r\n    },\r\n    addFriend: (state, action) => {\r\n        if(state.friends.filter(friend => friend.id === action.payload.id || friend.tagName === action.payload.tagName).length > 0){\r\n            return;\r\n        }\r\n        if(action.payload.password) delete action.payload.password;  \r\n        state.friends = [...state.friends, action.payload]\r\n    },\r\n    removeFriend: (state, action) => {\r\n        state.friends = state.friends.filter(el => el.id !== action.payload)\r\n    },\r\n    addFriendRequest: (state, action) => {\r\n        if(state.friendRequests.filter(req => req.id === action.payload.id).length > 0){\r\n          return;\r\n        }\r\n        state.friendRequests = [...state.friendRequests, action.payload]\r\n    },\r\n    removeFriendRequest: (state, action) => {\r\n        state.friendRequests = state.friendRequests.filter(el => el.id !== action.payload)\r\n    },\r\n    declineRequest: (state, action) => {\r\n      const request = state.friendRequests.filter(el => el.id === action.payload)[0];\r\n      if(request)\r\n        request.cancelled = true;\r\n    },\r\n    acceptRequest: (state, action) => {\r\n      const request = state.friendRequests.filter(el => el.id === action.payload)[0];\r\n      if(request)\r\n        request.accepted = true;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { clearFriends, addFriend, removeFriend, addFriendRequest, removeFriendRequest, declineRequest, acceptRequest } = friendsSlice.actions;\r\n\r\n// // The function below is called a thunk and allows us to perform async logic. It\r\n// // can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// // will call the thunk with the `dispatch` function as the first argument. Async\r\n// // code can then be executed and other actions can be dispatched\r\n// export const incrementAsync = amount => dispatch => {\r\n//   setTimeout(() => {\r\n//     dispatch(incrementByAmount(amount));\r\n//   }, 1000);\r\n// };\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectFriends = state => state.friends.friends;\r\n\r\nexport const selectFriendRequests = state => state.friends.friendRequests;\r\n\r\nexport default friendsSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const sidebarStates = {\r\n    hidden: \"hidden\",\r\n    show: \"show\",\r\n    full: \"full\"\r\n}\r\n\r\n// export const backgroundColors = {\r\n//     black: \"#191919\",\r\n//     red: \"\",\r\n//     blue: \"\",\r\n//     green: \"\",\r\n//     purple: \"\",\r\n//     gray: \"\",\r\n// }\r\n\r\n// export const filters = {\r\n//     red: \"\",\r\n//     blue: \"\",\r\n//     green: \"\",\r\n//     purple: \"\",\r\n//     gray: \"\",\r\n//     clear: \"\",\r\n//     opaque: \"\"\r\n// }\r\n\r\n// export const defaultAccountBackgroundURL = {\r\n//     mthood: \"\",\r\n//     mtsthelens: \"\",\r\n//     mtadams: \"\",\r\n//     mtrainier: \"\",\r\n//     mtbaker: \"\"\r\n// }\r\n\r\nexport const uiSlice = createSlice({\r\n  name: 'ui',\r\n  initialState: {\r\n    sidebarState: \"hidden\",\r\n    topbarMessage: \"\",\r\n    accountBackground: \"\",\r\n    backgroundColor: \"#191919\",\r\n    backgroundTint: \"transparent\",\r\n    conversationBackground: \"mthood\"\r\n  },\r\n  reducers: {\r\n    setSidebarState: (state, action) => {\r\n        switch(action.payload){\r\n            case action.payload === sidebarStates.hidden && state.sidebarState !== sidebarStates.hidden:\r\n                state.sidebarState = sidebarStates.hidden;\r\n                break ;\r\n            case action.payload === sidebarStates.show && state.sidebarState !== sidebarStates.show:\r\n                state.sidebarState = sidebarStates.show;\r\n                break ;\r\n            case action.payload === sidebarStates.full && state.sidebarState !== sidebarStates.full:\r\n                state.sidebarState = sidebarStates.full;\r\n                break ;\r\n            default: state.sidebarState = sidebarStates.show; break;\r\n        }\r\n    }, \r\n    setTopbarMessage: (state, action) => {\r\n        state.topbarMessage = action.payload;\r\n    },  \r\n    setDefaultBackground: (state, action) => {\r\n        state.defaultBackground = action.payload;\r\n    },  \r\n    setColor: (state, action) => {\r\n        state.backgroundColor = action.payload;\r\n    }, \r\n    setTint: (state, action) => {\r\n        state.backgroundTint = action.payload;\r\n    }, \r\n    setConversationBackground: (state, action) => {\r\n        state.conversationBackground = action.payload;\r\n    }   \r\n  }\r\n});\r\n\r\nexport const { setSidebarState, setTopbarMessage, setDefaultBackground, setColor, setTint, setConversationBackground } = uiSlice.actions;\r\n\r\nexport const selectSidebarState = state => state.ui.sidebarState;\r\nexport const selectTopbarMessage = state => state.ui.topbarMessage;\r\nexport const selectAccountBackground = state => state.ui.accountBackground;\r\nexport const selectBackgroundColor = state => state.ui.backgroundColor;\r\nexport const selectBackgroundTint = state => state.ui.backgroundTint;\r\nexport const selectConversationBackground = state => state.ui.conversationBackground;\r\n\r\nexport default uiSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState: {\r\n    username: \"\",\r\n    token: \"\"\r\n  },\r\n  reducers: {\r\n    setUserName: (state, action) => {\r\n      state.username = action.payload;\r\n    },\r\n    setToken: (state, action) => {\r\n        state.token = action.payload;\r\n    },\r\n    clearAuth: (state) => {\r\n      state.username = \"\"\r\n      state.token = \"\"\r\n    }\r\n  }\r\n});\r\n\r\nexport const { clearAuth, setUserName, setToken } = authSlice.actions;\r\n\r\nexport const selectUserName = state => state.auth.username;\r\nexport const selectToken = state => state.auth.token;\r\n\r\nexport default authSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport authReducer from '../auth/authSlice';\r\nimport conversationsReducer from '../currentConversation/conversationsSlice'\r\nimport accountReducer from '../account/accountSettingsSlice'\r\nimport friendsReducer from '../account/friendsSlice'\r\nimport inviteReducer from '../topbar/inviteSlice'\r\nimport { createSlice } from '@reduxjs/toolkit';\r\nimport uiReducer from '../uiSlice';\r\n\r\nexport const globalSlice = createSlice({\r\n  name: 'globals',\r\n  initialState: {\r\n    devHost: \"http://localhost:3000\",\r\n    prodHost: \"http://localhost:3000\", //will add custom host soon\r\n    testHost: \"http://localhost:3000\",\r\n    metadata: \"\",\r\n    api: \"http://localhost:3000\",\r\n    refreshExpire: -1,\r\n  },\r\n  reducers: {\r\n    setMetadata: (state, action) => {\r\n      state.metadata = action.payload;\r\n    },\r\n    setRefreshExpire: (state, action) => {\r\n      state.refreshExpire = action.payload;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { setMetadata, setRefreshExpire } = globalSlice.actions;\r\n\r\nexport const selectHost = state => {\r\n    if (process.env.NODE_ENV === \"production\") {\r\n      return state.globals.prodHost; \r\n    } \r\n    else if (process.env.NODE_ENV === \"development\") {\r\n      return state.globals.devHost; \r\n    } \r\n    else if (process.env.NODE_ENV === \"test\") {\r\n      return state.globals.testHost;\r\n    } else {\r\n      return state.globals.devHost;\r\n    }\r\n};\r\n\r\nexport const selectApi = state => {\r\n  if (process.env.NODE_ENV === \"production\") {\r\n    return state.globals.prodHost; \r\n  } \r\n  else if (process.env.NODE_ENV === \"development\") {\r\n    return state.globals.api; \r\n  } \r\n  else if (process.env.NODE_ENV === \"test\") {\r\n    return state.globals.api;\r\n  } else {\r\n    return state.globals.api;\r\n  }\r\n}\r\n\r\nexport const selectRefreshExpire = state => {\r\n  return state.globals.refreshExpire;\r\n}\r\n\r\nexport const reducer = globalSlice.reducer;\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    auth: authReducer,\r\n    conversations: conversationsReducer,\r\n    account: accountReducer,\r\n    invite: inviteReducer,\r\n    friends: friendsReducer,\r\n    globals: reducer,\r\n    ui: uiReducer\r\n  },\r\n});","import React, { useState, useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Button, InputGroup, Spinner, FormControl, Container, Row, Col } from 'react-bootstrap'\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport regex from '../regex';\r\nimport './loginscreen.css';\r\nimport {\r\n  addConversation\r\n} from '../currentConversation/conversationsSlice'\r\nimport {\r\n  setId,\r\n  setEmail,\r\n  setTagName,\r\n  login, \r\n  selectAccount\r\n} from '../account/accountSettingsSlice'\r\nimport {\r\n  addAcceptedInvite,\r\n  addReceivedInvite\r\n} from '../topbar/inviteSlice'\r\nimport { addFriend, \r\n  addFriendRequest \r\n} from '../account/friendsSlice';\r\nimport {\r\n  setTopbarMessage\r\n} from '../uiSlice';\r\nimport { useCookies } from 'react-cookie';\r\nimport {\r\n  setRefreshExpire,\r\n  selectRefreshExpire\r\n} from '../store/store';\r\n\r\nconst loginServer = async (username, password) => {\r\n  try {\r\n    const response = await fetch(\"http://localhost:3000/api/auth/login\", {\r\n      body: JSON.stringify({\r\n        tagName: `${username}`,\r\n        password: `${password}`\r\n      }),\r\n      headers: { \"content-type\": \"application/json\",\r\n    },\r\n      method: \"POST\"\r\n    });\r\n    const body = await response.json();\r\n    const { statusCode, id, user, invites, refreshToken } = body; \r\n    if(statusCode === 401 || statusCode === 400){\r\n        console.log(\"Error: Unauthorized, invalid credentials\");\r\n        return false;\r\n    }\r\n    if(statusCode === 500){\r\n        console.log(\"Error: Server error while attempting login!\")\r\n        return false;\r\n    }\r\n    if(refreshToken === true) {\r\n       console.log(\"Refresh token successfully set and will timeout in\");\r\n    }\r\n    console.log(\"Successfully logging in user\", user.tagName); \r\n    return { user, id, invites, refreshToken };\r\n  } catch(err) {\r\n    console.log(\"Error: Unable to login. Please refresh.\", err);\r\n    return false;\r\n  }\r\n}\r\n\r\nconst validateAccountDetails = (id, user, invites) => {\r\n  if(!id || \r\n      !user || \r\n      !user?.email || \r\n      !user?.tagName ||  \r\n      !Array.isArray(user?.conversations) ||  \r\n      !Array.isArray(user?.friends) || \r\n      !Array.isArray(user?.friendRequests) || \r\n      !Array.isArray(invites))\r\n      {\r\n        return false \r\n      }\r\n    else return true\r\n}\r\n\r\nfunction LoginScreen() {\r\n  const [userName, _setUserName] = useState(\"\");\r\n  const [password, _setPassword] = useState(\"\");\r\n  const [allowLogin, setAllowLogin] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [errorMsgs, setErrorMsgs] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const account = useSelector(selectAccount);\r\n  const [spinning, setSpinning] = useState(false);\r\n  const [loggingInCookie, setLoggingInCookie] = useState(false); \r\n  const focusRef = useRef(null);\r\n  const refreshExpire = useSelector(selectRefreshExpire); \r\n  useEffect(() => {\r\n    if(focusRef.current) {\r\n      focusRef.current.focus();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(async () => {\r\n    try {\r\n      if(loggingInCookie === false){\r\n        setLoggingInCookie(true);\r\n        const refreshResult = await fetch(\"http://localhost:3000/api/auth/refreshAccount\", {\r\n          credentials: \"include\"\r\n        });\r\n        if(refreshResult) {\r\n          const res = await refreshResult.json();\r\n          if(res?.statusCode === 401){\r\n            console.log(res);\r\n            console.log(\"No valid refresh token. User must login\");\r\n            setAllowLogin(true);\r\n            setSpinning(false); \r\n            setLoggingInCookie(false);\r\n          } \r\n          const  { id, user, invites, refreshToken } = res;\r\n          if(refreshToken === true) dispatch(setRefreshExpire(Date.now() + 875000)); \r\n          if(false === validateAccountDetails(id, user, invites)){\r\n            setSpinning(false); \r\n            setLoggingInCookie(false);\r\n            return;\r\n          }\r\n          addAccountToStore({ user: user, invites: invites });\r\n          dispatch(login());\r\n          console.log(\"Successfully logged in user \" + user?.tagName);\r\n          setSpinning(false);\r\n          setLoggingInCookie(false);\r\n       }\r\n      }\r\n    } catch(err) {\r\n      console.log(res);\r\n      console.log(\"No valid refresh token. User must login\", err);\r\n      setAllowLogin(true); \r\n    }  \r\n  }, [])\r\n\r\n  const checkInput = () => {\r\n    let passing = true;\r\n    if(regex.tagName.test(userName) === false){\r\n      setErrorMsgs([\"Tag name must be 8-24 characters\", ...errorMsgs]);\r\n      passing = false;\r\n    }\r\n    if(regex.password.test(password) === false){\r\n      setErrorMsgs([\"Password must be 8-32 characters\", ...errorMsgs]);\r\n      passing = false;\r\n    }\r\n    if(!passing) setError(true);\r\n    return passing;\r\n  };\r\n\r\n  useEffect(() => {\r\n      dispatch(setTopbarMessage(\"\"));\r\n  }, []);\r\n\r\n  const submit = async () => {\r\n    setError(false);\r\n    setErrorMsgs([]);\r\n    setSpinning(true);\r\n    if(!checkInput()){\r\n      console.log(\"Invalid form field inputs\", errorMsgs);\r\n      setSpinning(false);\r\n      return;\r\n    }\r\n    const result = await loginServer(userName, password);\r\n    if(result === false) {\r\n        setError(true);\r\n        setSpinning(false);\r\n        setErrorMsgs([\"Invalid Credentials\", ...errorMsgs]);\r\n        return;\r\n    }\r\n    const  { id, user, invites, refreshToken } = result;\r\n    if(refreshToken === true) dispatch(setRefreshExpire(Date.now() + 875000)); \r\n    if(false === validateAccountDetails(id, user, invites)){\r\n          setError(true);\r\n          setSpinning(false);\r\n          setErrorMsgs([\"Invalid Credentials\", ...errorMsgs]);\r\n          return;\r\n    }\r\n    addAccountToStore({ user: user, invites: invites });\r\n    dispatch(login());\r\n    console.log(\"Successfully logged in user \" + user?.tagName);\r\n    setSpinning(false);\r\n  }\r\n\r\n  const addAccountToStore = ({ user, invites }) => {\r\n    dispatch(setEmail(user?.email));\r\n    dispatch(setTagName(user?.tagName));\r\n    dispatch(setId(user?.id));\r\n    user.conversations.map(conv => {\r\n        if(conv.pending !== true){\r\n          dispatch(addConversation({ conversation: conv }));\r\n        }\r\n    });\r\n    user.friends.map(friend => {\r\n      dispatch(addFriend(friend));\r\n    }); \r\n    if(user.friendRequests && Array.isArray(user?.friendRequests)){   \r\n      for(let request of user?.friendRequests){\r\n        if(request?.recipientId === user?.id){   \r\n          dispatch(addFriendRequest(request))\r\n        } \r\n      }\r\n    }\r\n    if(invites && Array.isArray(invites)){\r\n      for(let invite of invites){\r\n        if(invite?.accepted === true)\r\n          dispatch(addAcceptedInvite(invite));\r\n        else  \r\n          dispatch(addReceivedInvite(invite));\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    (!account?.loggedIn) ? (\r\n    <Container className=\"h-100 w-100\" fluid>\r\n      <Row className=\"p-3 mt-5 text-white lead text-center\">\r\n        <Col className=\"p-3 text-center, mx-auto pt-5 mt-5 shadow\" style={{ borderRadius: \"15px\", backgroundColor: \"#191919\", opacity: 0.6, maxWidth: \"500px\"}}> \r\n          <h2 className=\"text-white\" style={{ opacity: 0.8, marginBottom: \"35px\" }} >Welcome to <span className=\"text-danger\">Project Zed</span></h2>\r\n          <h6 className=\"text-muted font-italic\" style={{ marginBottom: \"35px\"  }}>Secured by you, for you</h6>\r\n            {\r\n              (loggingInCookie) \r\n                ? (\r\n                  <Container fluid className=\"text-center\">\r\n                     <Row className=\"text-center pb-2\"><Col className=\"text-center\"><h6>Welcome Back!</h6></Col></Row>\r\n                     <Row className=\"text-center pb-2\"><Col className=\"text-center\"><span className=\"text-muted\">Logging Back In!</span></Col></Row>\r\n                     <Row className=\"text-center pt-4 pb-2\"><Col><Spinner animation=\"border\" className=\"mb-4\" style={{ height: 100, width: 100 }} variant=\"success\" /></Col></Row>\r\n                  </Container>)\r\n                : (\r\n                    <div>\r\n                      <InputGroup className=\"mb-5 mt-3\">\r\n                        <FormControl\r\n                          style={{marginLeft: \"auto\", marginRight: \"auto\", color: \"white\", opacity: 0.87, maxWidth: '400px', minHeight: '50px', border: 'none', backgroundColor: \"#404040\" }}\r\n                          placeholder=\"@Tagname\"\r\n                          aria-label=\"@Tagname\"\r\n                          aria-describedby=\"basic-addon1\"\r\n                          onKeyPress={\r\n                            async (e) => {\r\n                                if(e.key === \"Enter\") {\r\n                                    await submit()\r\n                                }\r\n                            }\r\n                        }\r\n                          onChange={ e => _setUserName(e.target.value) }\r\n                          ref={focusRef}\r\n                        />\r\n                      </InputGroup>\r\n                      <InputGroup className=\"mb-5\">\r\n                        <FormControl\r\n                          style={{marginLeft: \"auto\", marginRight: \"auto\", color: \"white\", opacity: 0.87, maxWidth: '400px', minHeight: '50px',border: 'none',  backgroundColor: \"#404040\" }}\r\n                          type=\"password\"\r\n                          placeholder=\"Password\"\r\n                          aria-label=\"Password\"\r\n                          aria-describedby=\"basic-addon1\"\r\n                          onKeyPress={\r\n                              async (e) => {\r\n                                  if(e.key === \"Enter\") {\r\n                                      await submit()\r\n                                  }\r\n                              }\r\n                          }\r\n                          onChange={ e => _setPassword(e.target.value) }\r\n                        />\r\n                      </InputGroup>\r\n                      <Container fluid className=\"border-top border-dark pt-2\">   \r\n                        <Row className=\"mt-3\">\r\n                          <Col>               \r\n                            <Button style={{ marginRight: 30, backgroundColor: \"#191919\", color: \"white\", opacity: 0.87, border:\"none\"}} variant=\"dark\" className=\"mx-auto button-outline-black\" onClick={() => document.getElementById(\"link-create-account\").click() }><Link id=\"link-create-account\" style={{ textDecoration: 'none', color: \"white\" }} to=\"/createAccount\">Create&nbsp;Account</Link></Button>\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className=\"mt-3\">\r\n                          <Col>\r\n                              <Button style={{ color: \"white\", backgroundColor: \"#191919\", opacity: 0.87, border:\"none\"}} variant=\"dark\" className=\"mx-auto button-outline-black \" onClick={() => document.getElementById(\"link-forgot-password\").click() }><Link id=\"link-forgot-password\" style={{ textDecoration: 'none', color: \"white\" }} to=\"/forgotPassword\">Forgot&nbsp;Password?</Link></Button>\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className=\"mt-3 mb-2\">\r\n                          <Col>\r\n                            {\r\n                              (spinning) ?  <Spinner animation=\"border\" className=\"mb-4\" style={{ height: 60, width: 60 }} variant=\"success\" /> : <Button onClick={submit} size=\"lg\" className=\"rounded-pill mb-4 mx-auto\" variant=\"outline-success\" style={{ opacity: 0.8, maxWidth: '200px', marginTop: \"20px\" }} block disabled={!allowLogin}>Login</Button>\r\n                            }\r\n                          </Col>\r\n                        </Row>\r\n                        <Row className=\"mt-3 mb-3\">\r\n                          { \r\n                            (error) ? (<Col className=\"text-center\">\r\n                                        <ul>\r\n                                          {\r\n                                            errorMsgs.map(err => <li key={err} className=\"text-danger text-center lead font-italic\">{err}</li>)\r\n                                          }\r\n                                        </ul>\r\n                                      </Col>)\r\n                                    : \"\"\r\n                            }\r\n                            { \r\n                              (spinning) ? (<Col className=\"text-center\">\r\n                                              <span className=\"text-success lead font-italic font-weight-bolder\" style={{ opacity: 1.0, fontSize: \"15pt\" }}>Logging in...</span>\r\n                                            </Col>)\r\n                                          : \"\"\r\n                            }\r\n                          </Row>\r\n                      </Container>\r\n                    </div>\r\n                  )\r\n              }\r\n        </Col> \r\n      </Row>\r\n    </Container>)\r\n    : <Redirect to=\"/home\"></Redirect>\r\n  );\r\n}\r\n\r\nexport default LoginScreen;\r\n","import React, {  } from 'react';\r\nimport LoginScreen from '../login/loginScreen';\r\nimport './animations.css';\r\n\r\nexport default function LoginComponent(){\r\n   return (<div key=\"login-screen-div\" className=\"w-100 h-100\">\r\n            <LoginScreen></LoginScreen>\r\n         </div>)               \r\n}\r\n\r\n\r\n","import {useState, useEffect} from 'react'\r\nexport default function useWindowSize() {\r\n    // Initialize state with undefined width/height so server and client renders match\r\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n    const [windowSize, setWindowSize] = useState({\r\n      width: undefined,\r\n      height: undefined,\r\n    });\r\n  \r\n    useEffect(() => {\r\n      // Handler to call on window resize\r\n      function handleResize() {\r\n        // Set window width/height to state\r\n        setWindowSize({\r\n          width: window.innerWidth,\r\n          height: window.innerHeight,\r\n        });\r\n      }\r\n      \r\n      // Add event listener\r\n      window.addEventListener(\"resize\", handleResize);\r\n      \r\n      // Call handler right away so state gets updated with initial window size\r\n      handleResize();\r\n      \r\n      // Remove event listener on cleanup\r\n      return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []); // Empty array ensures that effect is only run on mount\r\n  \r\n    return windowSize;\r\n  }","import React, { useState, useEffect } from 'react'\r\nimport {  Button, InputGroup, FormControl, Container, Row, Col } from 'react-bootstrap'\r\nimport regex from '../regex';\r\nimport './createaccount.css';\r\nimport useWindowSize from '../sidebar/windowSize';\r\nimport { setTopbarMessage } from '../uiSlice';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nexport default function ForgotPassword(){\r\n    const [email, setEmail] = useState(\"\");\r\n    const [tagname, setTagname] = useState(\"\");\r\n    const [error, setError] = useState(false);\r\n    const [errorMsgs, setErrorMsgs] = useState([]);\r\n    const [emailInvalid, setEmailInvalid] = useState(false);\r\n    const [tagnameInvalid, setTagnameInvalid] = useState(false);\r\n    const size = useWindowSize();\r\n    const dispatch = useDispatch();\r\n\r\n    const clearErr = () => {\r\n      setEmailInvalid(false);\r\n      setTagnameInvalid(false);\r\n    }\r\n    const checkInput = () => {\r\n      let passing = true;\r\n      const arr = [];\r\n      if(regex.email.test(email) === false){\r\n          arr.push(\"Invalid Email Address!\");\r\n          setEmailInvalid(true);\r\n          passing = false;\r\n      }\r\n      if(regex.tagName.test(tagname) === false){\r\n          arr.push(\"Tag name must be 8-24 characters\");\r\n          setTagnameInvalid(true);\r\n          passing = false;\r\n      }\r\n      if(!passing) {\r\n        setErrorMsgs(arr);\r\n        setError(true);\r\n      }\r\n      return passing;\r\n    }\r\n    const submit = () => {\r\n      clearErr();\r\n      setErrorMsgs([]);\r\n      setError(false);\r\n      if(!checkInput()){\r\n        console.log(\"Error with data submission: \", errorMsgs)\r\n        return;\r\n      }\r\n      console.log(`Sending forgot password request for user @${tagname} with email ${email}`);\r\n    }\r\n\r\n    useEffect(() => {\r\n      dispatch(setTopbarMessage(\"\"))\r\n    }, []);\r\n\r\n    return (\r\n            <Container className=\"h-100 w-100 pb-5\" fluid>\r\n              <Row className=\"p-3 mt-5 text-white lead text-center\">\r\n                  <Col className=\"p-3 text-center, mx-auto pt-5 mt-5 shadow\" style={{ borderRadius: \"15px\", backgroundColor: \"#191919\", opacity: 0.6, maxWidth: \"500px\"}}> \r\n                      <h4 className=\"text-white\" style={{ opacity: 0.8, marginBottom: \"35px\" }}>Forgotten Password</h4>\r\n                        <InputGroup className=\"mb-5 mt-3\">                      \r\n                          <FormControl\r\n                            style={{ marginLeft: \"auto\", marginRight: \"auto\", color: \"white\", opacity: 0.87, maxWidth: '400px', minHeight: '50px',border: 'none',  backgroundColor: \"#404040\" }}\r\n                            placeholder=\"Enter Your Tagname\"\r\n                            aria-label=\"Enter Your Tagname\"\r\n                            aria-describedby=\"basic-addon1\"\r\n                            className={(tagnameInvalid) ? \"form-control-error\" : \"form-control-normal\"}\r\n                            onChange={ e => { setTagname(e.target.value) }  }\r\n                          />\r\n                        </InputGroup>\r\n                        <InputGroup className=\"mb-5 mt-3\">\r\n                        <FormControl\r\n                          style={{ marginLeft: \"auto\", marginRight: \"auto\", color: \"white\", opacity: 0.87, maxWidth: '400px', minHeight: '50px',border: 'none',  backgroundColor: \"#404040\" }}\r\n                          placeholder=\"Enter Your Email\"\r\n                          aria-label=\"Enter Your Email\"\r\n                          aria-describedby=\"basic-addon1\"\r\n                          className={(emailInvalid) ? \"form-control-error\" : \"form-control-normal\"}\r\n                          onChange={ e => setEmail(e.target.value) }\r\n                        />\r\n                      </InputGroup>\r\n                      <Button onClick={submit} size=\"lg\" className=\"rounded-pill mb-4 mx-auto\" variant=\"outline-success\" style={{ opacity: 0.8, maxWidth: '200px' }} block>Reset Password</Button>\r\n                      <Container fluid style={{ opacity: 1.2 }}>\r\n                        <Row>\r\n                          <Col className=\"mx-auto text-left\">\r\n                            <ul style={{ listStyleType: \"none\", marginRight: \"auto\", marginLeft: \"auto\", paddingRight: \"30px\" }}>\r\n                              {(error) ?  <li><h6 className=\"border-bottom pb-2 border-danger text-danger font-weight-bold\">Errors</h6></li> : \"\"}\r\n                              {\r\n                                (error) ? errorMsgs.map(el => (<li key={el} className=\"font-italic lead text-danger\">{el}</li>)) : \"\"\r\n                              }   \r\n                            </ul>    \r\n                          </Col>\r\n                        </Row>  \r\n                      </Container>\r\n                  </Col> \r\n              </Row>\r\n          </Container>\r\n      );  \r\n}","import React from 'react';\r\nimport ForgotPassword from '../account/ForgotPassword';\r\n\r\nexport default function ForgotPW() {\r\n    return (  \r\n      <div className=\"w-100 h-100\">\r\n        <ForgotPassword></ForgotPassword>\r\n      </div>\r\n    )\r\n  }","import React, { useState, useEffect } from 'react';\r\nimport { Button, InputGroup, FormControl, Container, Row, Col } from 'react-bootstrap';\r\nimport './createaccount.css';\r\nimport { Redirect } from 'react-router-dom';\r\nimport regex from '../regex';\r\nimport useWindowSize from '../sidebar/windowSize';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setTopbarMessage } from '../uiSlice';\r\n\r\nfunction CreateAccount(){\r\n    const [tagName, setTagName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [pw1, setPW1] = useState(\"\");\r\n    const [pw2, setPW2] = useState(\"\");\r\n    const [backToLogin, setBackToLogin] = useState(false);\r\n    const [error, setError] = useState(false);\r\n    const [errorMsgs, setErrorMsgs] = useState([]);\r\n    const [passwordNoMatch, setPasswordNoMatch] = useState(false);\r\n    const [tagnameInvalid, setTagnameInvalid] = useState(false);\r\n    const [emailInvalid, setEmailInvalid] = useState(false);\r\n    const [pw1Invalid, setPw1Invalid] = useState(false);\r\n    const [pw2Invalid, setPw2Invalid] = useState(false);\r\n    const size = useWindowSize();\r\n    const dispatch = useDispatch();\r\n\r\n    const clearErr = () => {\r\n        setPasswordNoMatch(false);\r\n        setTagnameInvalid(false);\r\n        setEmailInvalid(false);\r\n        setPw1Invalid(false);\r\n        setPw2Invalid(false);\r\n    }\r\n    const checkInput = () => {\r\n        let passing = true;\r\n        const arr = []\r\n        if(pw1 !== pw2){\r\n            arr.push(\"Passwords don't match\")\r\n            setPasswordNoMatch(true);\r\n            passing = false;\r\n        }\r\n        if(regex.tagName.test(tagName) === false){\r\n            arr.push(\"Invalid Tagname\");\r\n            setTagnameInvalid(true);\r\n            passing = false;\r\n        }\r\n        if(regex.email.test(email) === false){\r\n            arr.push(\"Invalid Email\")\r\n            setEmailInvalid(true);\r\n            passing = false;\r\n        }\r\n        if(regex.password.test(pw1) === false){\r\n            arr.push(\"Invalid Password. Must be 10-32 characters and digits.\")\r\n            setPw1Invalid(true);\r\n            passing = false;\r\n        }\r\n        if(regex.password.test(pw2) === false){\r\n            arr.push(\"Invalid Second Password. Must be 10-32 characters and digits.\")\r\n            setErrorMsgs(arr);\r\n            setPw1Invalid(true);\r\n            passing = false;\r\n        }\r\n        if(!passing) {\r\n            setError(true);\r\n            setErrorMsgs(arr);\r\n        }\r\n        return passing;\r\n    }\r\n    const submit = async () => {\r\n        setError(false);\r\n        clearErr();\r\n        if(!checkInput()){\r\n            console.log(\"Error with data submission: \", errorMsgs)\r\n            return;\r\n        }\r\n        const bd = {\r\n            email: email,\r\n            password: pw1,\r\n            session: 0,\r\n            tagName: tagName\r\n        }\r\n        const res = await fetch(\"http://localhost:3000/api/users/\", {\r\n            method: \"POST\",\r\n            headers: { 'content-type': 'application/json' },\r\n            body: JSON.stringify(bd)\r\n        })\r\n        const body = await res.json();\r\n        console.log(body);\r\n        setBackToLogin(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(setTopbarMessage(\"\"))\r\n    }, []);\r\n\r\n    return (\r\n        (!backToLogin) ? \r\n        <Container className=\"h-100 w-100\" fluid>\r\n            <Row className=\"p-3 mt-5 text-white lead text-center\">\r\n                <Col className=\"p-3 text-center, mx-auto pt-5 mt-5 shadow\" style={{ borderRadius: \"15px\", backgroundColor: \"#191919\", opacity: 0.6, maxWidth: \"500px\" }}> \r\n                    <h4 className=\"text-white\" style={{ opacity: 0.8, marginBottom: \"55px\" }}>Enter your account information</h4>\r\n                    <InputGroup className=\"mb-5 mt-3\">\r\n                        <FormControl\r\n                            style={{ marginLeft: \"auto\", marginRight: \"auto\", color: \"white\", opacity: 0.87, maxWidth: '400px', minHeight: '50px',border: 'none',  backgroundColor: \"#404040\" }}\r\n                            placeholder=\"Email Address\"\r\n                            aria-label=\"Email Address\"\r\n                            aria-describedby=\"basic-addon1\"\r\n                            onChange={ (e) => setEmail(e.target.value) }\r\n                            className={(emailInvalid) ? \"form-control-error\" : \"form-control-normal\"}\r\n                        />\r\n                    </InputGroup>\r\n                    <InputGroup  className=\"mb-5 mt-3\">\r\n                        <FormControl\r\n                            style={{ marginLeft: \"auto\", marginRight: \"auto\", color:  \"white\", opacity: 0.87, maxWidth: '400px', minHeight: '50px',border: 'none',  backgroundColor: \"#404040\" }}\r\n                            placeholder=\"Desired Tag Name\"\r\n                            aria-label=\"Desired Tag Name\"\r\n                            aria-describedby=\"basic-addon1\"\r\n                            onChange={ (e) => setTagName(e.target.value) }\r\n                            className={(tagnameInvalid) ? \"form-control-error\" : \"form-control-normal\"}\r\n                        />\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-5 mt-3\">\r\n                        <FormControl\r\n                            style={{ marginLeft: \"auto\", marginRight: \"auto\", color: \"white\", opacity: 0.87, maxWidth: '400px', minHeight: '50px',border: 'none',  backgroundColor: \"#404040\" }}\r\n                            type=\"password\"\r\n                            placeholder=\"Desired Password\"\r\n                            aria-label=\"Desired Password\"\r\n                            aria-describedby=\"basic-addon1\"\r\n                            onChange={ (e) => setPW1(e.target.value) }\r\n                            className={(pw1Invalid || passwordNoMatch) ? \"form-control-error\" : \"form-control-normal\"}\r\n                            />\r\n                    </InputGroup>\r\n                    <InputGroup  className=\"mb-5 mt-3\">\r\n                        <FormControl\r\n                            style={{ marginLeft: \"auto\", marginRight: \"auto\", color: \"white\", opacity: 0.87, maxWidth: '400px', minHeight: '50px',border: 'none',  backgroundColor: \"#404040\" }}\r\n                            type=\"password\"\r\n                            placeholder=\"Confirm Password\"\r\n                            aria-label=\"Confirm Password\"\r\n                            aria-describedby=\"basic-addon1\"\r\n                            onChange={ (e) => setPW2(e.target.value) }\r\n                            className={(pw2Invalid || passwordNoMatch) ? \"form-control-error\" : \"form-control-normal\"}\r\n                            />\r\n                    </InputGroup>\r\n                    <Button onClick={submit} size=\"lg\" className=\"rounded-pill mb-4 mx-auto\" variant=\"outline-success\" style={{ opacity: 0.8, maxWidth: '200px' }} block>Sign Up</Button>\r\n                    <Container fluid style={{ opacity: 1.2 }}>\r\n                        <Row>\r\n                          <Col className=\"mx-auto text-left\">\r\n                            <ul style={{ listStyleType: \"none\", marginRight: \"auto\", marginLeft: \"auto\", paddingRight: \"30px\" }}>\r\n                              {(error) ?  <li><h6 className=\"border-bottom pb-2 border-danger text-danger font-weight-bold\">Errors</h6></li> : \"\"}\r\n                              {\r\n                                (error) ? errorMsgs.map(el => (<li key={el} className=\"font-italic lead text-danger\">{el}</li>)) : \"\"\r\n                              }   \r\n                            </ul>    \r\n                          </Col>\r\n                        </Row>  \r\n                      </Container>\r\n                </Col> \r\n            </Row>\r\n        </Container>\r\n      : <Redirect to=\"/login\"></Redirect>\r\n    );\r\n}\r\nexport default CreateAccount;","import React from 'react';\r\nimport CreateAccount from '../account/CreateAccount';\r\n\r\nexport default function CreateAcc(){\r\n    return (\r\n      <div className=\"w-100 h-100\">\r\n        <CreateAccount></CreateAccount>\r\n      </div>  \r\n    )\r\n  }","import React, { useEffect } from 'react';\r\nimport io from \"socket.io-client\";\r\nimport { selectAccount } from '../account/accountSettingsSlice';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectHost } from '../store/store';\r\nimport {\r\n    addMessage,\r\n    selectConversations,\r\n    selectCurrentConversation,\r\n    setTyping,\r\n    setRead,\r\n    pinMessage\r\n} from '../currentConversation/conversationsSlice';\r\nimport {\r\n    selectFriends\r\n} from '../account/friendsSlice';\r\nimport {  toast } from 'react-toastify';\r\nimport { useCookies } from 'react-cookie';\r\nlet chatSocket = null;\r\n\r\nconst socketEvents = {\r\n    received: {\r\n        connectSuccess: \"connectSuccess\",\r\n        connectError: \"connectError\",\r\n        delivered: \"delivered\",\r\n        deliveryError: \"deliveryError\",\r\n        readReceipt: \"readReceipt\",\r\n        typing: \"typing\",\r\n        listening: \"listening\",\r\n        unlistened: \"unlistened\",\r\n        unlistenError: \"unlistenError\",\r\n        currentConversationUpdate: \"currentConversationUpdate\",\r\n        setCurrentConversationError: \"setCurrentConversationError\",\r\n        refreshSuccess: \"refreshSuccess\",\r\n        refreshError: \"refreshError\",\r\n        messagePinned: \"messagePinned\",\r\n        messagePinnedError: \"messagePinnedError\"\r\n    },\r\n    sent: {\r\n        connect: \"connect\",\r\n        disconnect: \"disconnect\",\r\n        chatToServer: \"chatToServer\",\r\n        readMessage: \"readMessage\",\r\n        typing: \"typing\",\r\n        listen: \"listen\",\r\n        unlisten: \"unlisten\",\r\n        setCurrentConversation: \"setCurrentConversation\",\r\n        pinMessage: \"pinMessage\"\r\n    }\r\n}\r\n\r\nexport default function ChatSocket(){\r\n    const account = useSelector(selectAccount);\r\n    let currentConversation = useSelector(selectCurrentConversation);\r\n    const conversations = useSelector(selectConversations);\r\n    const dispatch = useDispatch();\r\n    const host = useSelector(selectHost);\r\n    const friends = useSelector(selectFriends);\r\n    const [token, setToken] = useCookies(['Refresh']);\r\n    const listenAllRooms = (chatSocket) => {\r\n        console.log(\"Listening to all rooms\", conversations)\r\n        if(conversations && Array.isArray(conversations)){\r\n            for(let conv of conversations){\r\n                if(conv && conv.id && conv.pending === false){\r\n                    console.log(\"listening to conversation\", conv);\r\n                    chatSocket.emit(socketEvents.sent.listen, { room: conv.id, user: account.id });\r\n                }\r\n            }\r\n        } else {\r\n            //conversations = single conversation aka current one\r\n            chatSocket.emit(socketEvents.sent.listen, { room: currentConversation.id, user: account.id });\r\n        }\r\n    } \r\n    \r\n    const teardownEventListeners = (chatSocket) => {\r\n        if(chatSocket == null || !chatSocket){\r\n            return true;\r\n        }\r\n        for(let key in socketEvents.received){\r\n            chatSocket.off(socketEvents.received[key]);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(currentConversation && currentConversation.id && account && currentConversation.id !== \"0\"){\r\n            if(!token) { console.log(\"!token\"); return; }\r\n            const socketOptions = {\r\n                transportOptions: {\r\n                    polling: {\r\n                        extraHeaders: {\r\n                            credentials: \"include\"\r\n                        }\r\n                    }\r\n                },\r\n                forceNew: true\r\n            }\r\n            console.log(\"Setting up chat socket\");\r\n            chatSocket = io(`${host}/chat`, socketOptions);\r\n            console.log(\"Setting up chat socket event listeners and listening to rooms\");\r\n            console.log(\"Setting up listeners\");\r\n            chatSocket.on(socketEvents.received.listening, (msg) => {\r\n                console.log(`Successfully listening on room with ID ${msg.room}`)\r\n            })\r\n            chatSocket.on(socketEvents.received.connectSuccess, (msg) => {\r\n                console.log(`Connected to socket.io server successfully with client id ${msg.socketId}`);\r\n            });\r\n            chatSocket.on(socketEvents.received.connectError, (msg) => {\r\n                console.log(`Error: Cannot connect to socket.io server | ${msg.message}`);\r\n            });\r\n            chatSocket.on(socketEvents.received.delivered, (msg) => {\r\n                console.log(`Handle message | ${msg.message.id} | delivered`);\r\n                if(account.id !== msg.message.user.id && msg.message.conversation.id !== currentConversation.id){\r\n                    //On another screen and received a message, pop up a toast\r\n                    toast.info(`Message received from: ${msg.message.user.tagName}` , { position: \"top-center\", hideProgressBar: true, pauseOnHover: true} );\r\n                }\r\n                if(msg.message.id && msg.message.body && msg.message.createdAt){\r\n                    console.log(`Adding message to state ... | ${msg.message.id}`);\r\n                    dispatch(addMessage({ message: msg.message, conversation: msg.message.conversation }));\r\n                }\r\n            });\r\n            chatSocket.on(socketEvents.received.deliveryError, () => {\r\n                console.log(\"Error: server error while marking message as delivered\");\r\n            });\r\n            chatSocket.on(socketEvents.received.readReceipt, (msg) => {\r\n                console.log(`Handle message | ${msg.message.id} | read receipt`);\r\n                if(msg.message.id && msg.message.body && msg.message.createdAt){\r\n                    //Is the message valid? ... Just checking properties....\r\n                    //Can probably use typescript interfaces eventually once I add ts transpiler to build scripts\r\n                    console.log(`Adding message read receipt to state ... | ${msg.message.id}`);\r\n                    dispatch(setRead({ messageId: msg.message.id, convId: msg.message.conversation.id }));\r\n                }\r\n            });\r\n            chatSocket.on(socketEvents.received.typing, (msg) => {\r\n                console.log(`Handle typing event conversation | ${msg.conv}`);\r\n                if(msg.conv && msg.user){\r\n                    if(msg.user.id === account.id){\r\n                        //Is the sender of this event equal to myself?\r\n                        //Return void okay?\r\n                        return;\r\n                    }\r\n                    if(currentConversation.id === msg.conv){\r\n                        //If msg.typing is null for whatever reason || false\r\n                        dispatch(setTyping(msg.typing || false));\r\n                    }\r\n                }\r\n            });\r\n            chatSocket.on(socketEvents.received.unlistened, (msg) => {\r\n                console.log(`Handle unlisten event for conversation | ${msg.room}`);\r\n            });\r\n            chatSocket.on(socketEvents.received.unlistenError, (msg) => {\r\n                console.log(`Error: unlisten event error for conversation | ${msg.msg}`);\r\n            });\r\n            chatSocket.on(socketEvents.received.currentConversationUpdate, (msg) => {\r\n                console.log(`Handle current conversation update event for user | ${msg.user.tagName}`);\r\n                if(msg.user){\r\n                    let friend = friends.filter(el => el.id === msg.user.id)[0];\r\n                    if(friend){\r\n                        console.log(`Handle set current conversation for friend @${msg.user.tagName}`);\r\n                        friend = msg.user;\r\n                    }\r\n                }\r\n            });\r\n            chatSocket.on(socketEvents.received.setCurrentConversationError, (msg) => {\r\n                console.log(`Error: set current conversation event error | ${msg.msg}`);\r\n            }); \r\n            chatSocket.on(socketEvents.received.refreshSuccess, (msg) => {\r\n                console.log(`Handle success refresh socket client ID with server ${msg.clientId}`);\r\n            });\r\n            chatSocket.on(socketEvents.received.refreshError, (msg) => {\r\n                console.log(`Handle error for refresh socket client ID with server error ${msg.msg}`);\r\n            });\r\n            chatSocket.on(socketEvents.received.messagePinned, data => {\r\n                console.log(\"Handle message pinned from server\", data); \r\n                dispatch(pinMessage(data.message)); \r\n            });\r\n            chatSocket.on(socketEvents.received.messagePinnedError, data => {\r\n                console.log(\"Handle message pinned error from server\", data); \r\n            });\r\n            listenAllRooms(chatSocket);\r\n            chatSocket.emit('refresh', { userId: account.id, refresh: true });\r\n        } else {\r\n            chatSocket = null;\r\n        }\r\n        return () => {\r\n            if(chatSocket) {\r\n                Object.keys(socketEvents.received).map(el => chatSocket.off(el));\r\n                chatSocket.close();\r\n                chatSocket = null;\r\n            }\r\n        }\r\n    }, [currentConversation.id]);\r\n    return (<></>);\r\n}\r\n\r\nexport { chatSocket }","import React, { useEffect, useState, useRef } from 'react' \r\nimport { Row, Col, InputGroup, FormControl, Button, Spinner } from 'react-bootstrap';\r\nimport { SendRounded } from '@material-ui/icons';\r\nimport {\r\n    selectCurrentConversation\r\n} from './conversationsSlice';\r\nimport {\r\n    selectAccount\r\n} from '../account/accountSettingsSlice';\r\nimport { useSelector } from 'react-redux'\r\nimport { chatSocket } from '../socket/chatSocket';\r\nimport useWindowSize from '../sidebar/windowSize';\r\nimport regex from '../regex';\r\nlet searchTimeout;\r\n\r\nexport default function CurrentConversationMessageBox(){\r\n\r\n    const [message, setMessage] = useState(\"\");\r\n    const account = useSelector(selectAccount);\r\n    const currentConversation = useSelector(selectCurrentConversation);\r\n    const formRef = useRef(null);\r\n    const [typingTimeout, setTypingTimeout] = useState(null);\r\n    const size = useWindowSize();\r\n    const [error, setError] = useState(false);\r\n    const [pending, setPending] = useState(false);\r\n    const [errorMsgs, setErrorMsgs] = useState([]);\r\n    const [sending, setSending] = useState(\"\");\r\n    const [spinning, setSpinning] = useState(false);\r\n    const checkInput = () => {\r\n        let passing = true;\r\n        if(regex.messageBody.test(message) === false){\r\n            setErrorMsgs([\"Invalid message body. Must be 1-200 characters.\", ...errorMsgs]);\r\n            passing = false;\r\n        }\r\n        if(!passing) setError(true);\r\n        return passing;\r\n    }\r\n\r\n    const sendMessage = async () => {\r\n        if(!checkInput()){\r\n            console.log(\"Error with sending message\", errorMsgs);\r\n            return;\r\n        }\r\n        console.log(\"Send message \", message);\r\n        setPending(true);\r\n        if(chatSocket){\r\n           chatSocket.emit('chatToServer', { sender: account.tagName, room: currentConversation.id, body: `${message}` });\r\n           setSpinning(true);\r\n           formRef.current.value = \"\"\r\n           setPending(false);\r\n        }\r\n        else {\r\n            setError(true);\r\n            setErrorMsgs([\"Corrupted chat socket. Please refresh.\"])\r\n            console.log(\"Corrupted chat socket. Please refresh.\");\r\n            setPending(false);\r\n        }\r\n    }\r\n    const sendTyping = (isTyping) => {\r\n        if(chatSocket && account && currentConversation){\r\n            chatSocket.emit('typing', { sender: account.tagName, room: currentConversation.id, typing: isTyping } );\r\n        }\r\n        else {\r\n            console.log(\"Error: no conversation to send typing to! Please refresh\")\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(chatSocket && formRef && currentConversation && account){\r\n            formRef.current.onkeypress = () => { \r\n                if (searchTimeout !== undefined) clearTimeout(searchTimeout);\r\n                searchTimeout = setTimeout(() => {\r\n                    console.log(\"typing done\")\r\n                    setTypingTimeout(false)\r\n                    sendTyping(false)\r\n                }, 1000);\r\n            }\r\n        }\r\n    }, [currentConversation.id])\r\n    useEffect(() => {\r\n        if(currentConversation.messages && Array.isArray(currentConversation.messages)){\r\n            setSpinning(false);\r\n        }\r\n    }, [currentConversation.messages])\r\n    return ( \r\n        <div>\r\n            <Row className=\"w-100 text-center\" style={{ position: \"fixed\", bottom: 40, left: 50 }}>\r\n                {(size.width > 768) ? (<Col style={{ minWidth: \"240px\", maxWidth: \"240px\" }}></Col>) : \"\" }\r\n                <Col className=\"mx-auto\" style={{ paddingRight: \"15px\", paddingLeft: (size.width > 768) ? \"2%\" : \"5%\" }}>\r\n                {(error) ? (<div className=\"text-danger lead\" style={{ opacity: 0.7 }}>{errorMsgs}</div>) : \"\"}\r\n                <InputGroup className=\"pb-3 mx-auto\">\r\n                    <FormControl\r\n                        style={{ backgroundColor: \"#404040\", color: \"white\", border: \"none\" }}\r\n                        placeholder=\"Enter a Message\"\r\n                        aria-label=\"Enter a Message\"\r\n                        aria-describedby=\"basic-addon2\"\r\n                        className=\"rounded-pill p-4\"\r\n                        ref={formRef}\r\n                        onKeyPress={\r\n                            async (e) => {\r\n                                if(e.key === \"Enter\") {\r\n                                    await sendMessage()\r\n                                }\r\n                            }\r\n                        }\r\n                        onChange={async (e) => {\r\n                            if(chatSocket && !typingTimeout){\r\n                                setTypingTimeout(true)\r\n                                sendTyping(true)\r\n                                console.log(\"Typing started\")\r\n                            }\r\n                            setMessage(e.target.value)\r\n                        }}\r\n                    />\r\n                    <InputGroup.Append>\r\n                    {\r\n                        (spinning) ? <Spinner className=\"m-2 p-2\" size=\"lg\" variant=\"info\" animation=\"border\" /> :\r\n                            (<Button onClick={async () => { \r\n                                await sendMessage() } } \r\n                                    className=\"ml-1 rounded-pill text-right\" \r\n                                    variant=\"outline-secondary\" \r\n                                    style={{ \"border\": \"none\", \r\n                                    backgroundColor: \"#404040\", \r\n                                    color: \"#02a5ff\" }} \r\n                                    id=\"basic-addon2\">\r\n                                <SendRounded \r\n                                    style={{ color: \"white\", opacity: \"0.87\"}}\r\n                                >\r\n                                </SendRounded>\r\n                            </Button>)\r\n                    }  \r\n                    </InputGroup.Append>\r\n                </InputGroup>\r\n                </Col>\r\n                <Col xs=\"1\"></Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n}","import React, { useEffect, useState, useRef } from 'react' \r\nimport { Row, Col, Container, Spinner, Button, Dropdown } from 'react-bootstrap'\r\nimport useWindowSize from '../sidebar/windowSize'\r\nimport { \r\n    selectCurrentConversation,\r\n    sortMessages,\r\n    batchAddMessages\r\n} from './conversationsSlice'\r\nimport {\r\n    selectAccount\r\n} from '../account/accountSettingsSlice'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport './messages.css'\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport '../sidebar/sidebar.css'; //For the dropdown, this is rreally lazy\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport FlagIcon from '@material-ui/icons/Flag';\r\nimport { Typography } from '@material-ui/core'\r\nimport {\r\n    selectHost\r\n} from '../store/store';\r\nimport { selectToken } from '../auth/authSlice';\r\n\r\nconst weekdays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n\r\nfunction MessageDropdown({ sentByMe, deleteMessage, pinMessage }){\r\n    return (<Dropdown className={(sentByMe) ? \"msg-dropdown message-dropdown-sender light-hover\" : \"msg-dropdown message-dropdown-received light-hover\"}  drop={(sentByMe) ? \"left\" : \"right\"} >              \r\n                <Dropdown.Toggle \r\n                    as={Button} variant=\"dark\" className=\"message-menu-button\">\r\n                    <MoreVertIcon></MoreVertIcon>\r\n                </Dropdown.Toggle>\r\n                <Dropdown.Menu style={{ backgroundColor: \"#222222\", minWidth: \"80px\"} } className=\"my-dropdown-message shadow text-white text-center\">        \r\n                    <Dropdown.Item  \r\n                        className=\"text-white shadow dropdown-item-message\" \r\n                        as=\"button\" onClick={ \r\n                            (e) =>\r\n                            {\r\n                                e.preventDefault();\r\n                                e.stopPropagation();\r\n                                if(pinMessage) pinMessage();\r\n                            }}>\r\n                        Pin&nbsp;<FlagIcon></FlagIcon>\r\n                    </Dropdown.Item>    \r\n                    {\r\n                        (sentByMe) ?  <Dropdown.Item  \r\n                                        className=\"text-white shadow dropdown-item-message\" \r\n                                        as=\"button\" onClick={ \r\n                                            (e) =>\r\n                                            {\r\n                                                e.preventDefault();\r\n                                                e.stopPropagation();\r\n                                                if(deleteMessage) deleteMessage();\r\n                                            }}>\r\n                                        Delete&nbsp;<DeleteOutlineIcon></DeleteOutlineIcon>\r\n                                    </Dropdown.Item> : \"\"\r\n                    }\r\n                </Dropdown.Menu>\r\n            </Dropdown>)\r\n}\r\n\r\n\r\n// object looks like: \r\n// {\r\n//     hour: number (0-12),\r\n//     min: number (0-60),\r\n//     pm: undefined (bool),\r\n//     day: number (0-31),\r\n//     minsAgo\r\n// }\r\nexport const getDateMetaData = (createdAt) => {\r\n    const date = new Date(Date.parse(createdAt));\r\n    return {\r\n        hour: date.getHours(),\r\n        min: date.getMinutes(),\r\n        pm: (date.getHours() > 12),\r\n        day: (date.getTime() < Date.now() - 86400000) ? weekdays[date.getDay()] : \"\",\r\n        minsAgo: ((Date.now() - date) / 1000 ) / 60\r\n    }\r\n}\r\n\r\n//Component for a message from me \r\nexport function MessageMe({ message, isBottom }) {\r\n    const [date, setDate] = useState(getDateMetaData(message.createdAt)); \r\n    const [showMenu, setShowMenu] = useState(false);\r\n    const size = useWindowSize();\r\n    const pinMessage = () => {\r\n        alert('message pinned');\r\n    }\r\n    const deleteMessage = () => {\r\n        alert('message del');\r\n    }\r\n    return (\r\n        <Container key={Math.random()} className=\"mt-2 mb-2\" style={{ marginTop: \"auto\", minHeight: \"80px\" }} fluid>\r\n            <Row onMouseLeave={() => setShowMenu(false) }>\r\n                <Col xs=\"12\" className=\"text-right pr-2\">\r\n                    <Container fluid className={(size.width > 768) ? \"pr-5\" : \"\"}>\r\n                        <Row>\r\n                            <Col className=\"text-right message-me-column\" onMouseEnter={() => { setShowMenu(true)}} >\r\n                                <Typography className=\"p-2 m-1 text-white text-left message-from-me message-column\" style={{ borderRadius: \"18px 18px 5px 18px\", display:\"block\", backgroundColor: \"#3266a8\", wordWrap: \"break-word\"}}>{message.body}</Typography>\r\n                            </Col>\r\n                            <Col xs=\"1\" style={{maxWidth: \"20px\" }} className=\"text-right\">\r\n                                {(showMenu) ? <MessageDropdown sentByMe={true} pinMessage={pinMessage} deleteMessage={deleteMessage}></MessageDropdown>: \"\"}\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Col>\r\n            </Row>\r\n            {\r\n                (showMenu || isBottom) ? (\r\n                    <Row style={{ opacity: 0.8 }}>\r\n                        <Col xs=\"12\" className=\"text-right pr-3\">\r\n                            <Container fluid className={(size.width > 768) ? \"pr-5\" : \"\"}>\r\n                                <Row>\r\n                                    <Col xs={(size.width > 768 ? \"8\" : \"6\")} className=\"text-center\">\r\n                                    </Col>\r\n                                    <Col className=\"text-right\">\r\n                                        <span style={{ opacity: 0.7, fontSize: \"10pt\" }} className=\"font-italic text-left text-white text-small\">\r\n                                            {`${(message.read === true ) ? \"Read - \" : \" Delivered - \"}`}\r\n                                            {(date.minsAgo < 60) ? \r\n                                                `${(date.minsAgo.toFixed() > 0) ? date.minsAgo.toFixed() + \" mins ago\" : \"Now\"}`  \r\n                                                : `${(date.day) ? date.day + \", \" : \"Today, \"}${date.hour}:${(date.min < 10) ? \"0\" + date.min : date.min}${(date.pm) ? \"PM\" : \"AM\"}`}\r\n                                        </span>\r\n                                    </Col>     \r\n                                </Row>\r\n                            </Container>\r\n                        </Col>                   \r\n                    </Row>\r\n                ) : \"\"\r\n            }\r\n        </Container>\r\n    ) \r\n}\r\n\r\n//Component for a message from someone else\r\nexport function MessageOther({ message }) {\r\n    const [date, setDate] = useState(getDateMetaData(message.createdAt)); \r\n    const [showMenu, setShowMenu] = useState(false);\r\n    const size = useWindowSize();\r\n    const dispatch = useDispatch();\r\n    const pinMessage = () => {\r\n        alert('message pinned');\r\n    }\r\n    return (\r\n        <Container key={Math.random()} className=\"mt-2 mb-2 p-1\"  style={{ marginTop: \"auto\", minHeight: \"80px\" }} fluid>\r\n         <Row onMouseLeave={() => setShowMenu(false) }>\r\n                <Col xs=\"12\" className=\"text-left\">\r\n                    <Container fluid>\r\n                        <Row>\r\n                            <Col xs=\"1\" style={{maxWidth: \"20px\" }} className=\"text-left\">\r\n                                {(showMenu) ? <MessageDropdown pinMessage={pinMessage} sentByMe={false}></MessageDropdown>: \"\"}\r\n                            </Col>\r\n                            <Col className=\"text-left message-me-column\" onMouseEnter={() => { setShowMenu(true)}} >\r\n                                <Typography className=\"p-2 m-1 text-white text-left message-from-other message-column\" style={{ borderRadius: \"5px 18px 18px 18px\", display:\"block\", backgroundColor: \"#1E3D64\", wordWrap: \"break-word\"}}>{message.body}</Typography>\r\n                            </Col>  \r\n                        </Row>\r\n                    </Container>\r\n                </Col>   \r\n        </Row>\r\n        <Row style={{ opacity: 0.8, maxHeight: \"10px\" }}>\r\n            <Col xs=\"9\" className=\"text-left pl-4 pt-2\" style={{ opacity: 0.7 }}>\r\n                <span className=\"font-italic text-left text-white\">\r\n                <span style={{ opacity: 0.7, fontSize: \"10pt\" }}  className=\"text-white text-small\">{`@${message.user.tagName} `}</span>\r\n                {(date.minsAgo < 60) ? `- ${(date.minsAgo.toFixed() > 0) ? \r\n                    date.minsAgo.toFixed() + \" mins ago\" : \"Now\"}`  \r\n                    : `- ${(date.day) ? date.day + \", \" : \"Today, \"}${date.hour}:${(date.min < 10) ? \"0\" + date.min : date.min} ${(date.pm) ? \"PM\" : \"AM\"}`}\r\n                </span>\r\n            </Col>\r\n            <Col xs=\"3\" className=\"text-center\">\r\n            </Col>\r\n       </Row>\r\n    </Container>)\r\n}\r\n\r\nfunction MessageListItem({ message, isBottom }) {\r\n    const account = useSelector(selectAccount);\r\n    const isSender = (message.user.id === account.id); \r\n    return (isSender) ? (\r\n           <MessageMe message={message} isBottom={isBottom}></MessageMe>\r\n    ) : (\r\n           <MessageOther message={message}></MessageOther>\r\n    )\r\n}\r\n\r\nexport default function CurrentConversationMessagesListView({ defaultView }){\r\n    const [ isTyping, setIsTyping] = useState(false);\r\n    const [messages, setMessages] = useState([]);\r\n    const [loadingMessages, setLoadingMessages] = useState(false);\r\n    let currentConversation = useSelector(selectCurrentConversation);\r\n    const account = useSelector(selectAccount);\r\n    const host = useSelector(selectHost);\r\n    const token = useSelector(selectToken);\r\n    const size = useWindowSize();\r\n    const colRef = useRef();\r\n    const dispatch = useDispatch();\r\n    if(!currentConversation) currentConversation = {}\r\n    let rowHeight = size.height - (size.height / 8);\r\n    if(isNaN(rowHeight)){\r\n        rowHeight = window.innerHeight - (window.innerHeight / 8)\r\n    }\r\n\r\n    const lazyLoadMessages = async () => {\r\n        console.log(\"Requesting more messages for conversation \" + currentConversation.id)\r\n        const messageResult = await fetch(`http://localhost:3000/api/conversation/messages/range/?` + new URLSearchParams({\r\n            id: currentConversation.id,\r\n            beforeDate: currentConversation.messages[0].createdAt,\r\n            number: 25,\r\n        }), {\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`,\r\n            }\r\n        });\r\n        const messages = await messageResult.json(); \r\n        if(Array.isArray(messages)) {\r\n            console.log(messages)\r\n            dispatch(batchAddMessages({ messages: messages, conversationId: currentConversation.id }));     \r\n        }\r\n    }\r\n    const handleScroll = async () => {\r\n        if(colRef.current){\r\n            if(colRef.current?.scrollTop <= 100 && loadingMessages !== true) {\r\n                if(currentConversation?.messages?.length < currentConversation?.numberOfMessages){\r\n                    if(loadingMessages === false) {\r\n                        setLoadingMessages(true);\r\n                        await lazyLoadMessages();\r\n                        setLoadingMessages(false);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(currentConversation && currentConversation.messages){\r\n            dispatch(sortMessages());\r\n            setMessages(currentConversation.messages);\r\n        }\r\n        if(colRef && colRef.current && loadingMessages === false)\r\n            colRef.current.scrollTop = colRef.current.scrollHeight\r\n    }, [currentConversation.messages]);\r\n    useEffect(() => {\r\n        if(colRef && colRef.current && loadingMessages === false)\r\n            colRef.current.scrollTop = colRef.current.scrollHeight\r\n    }, [messages]);\r\n    useEffect(() => {\r\n        if(currentConversation && currentConversation.typing !== undefined){\r\n            console.log(\"setting is typing\");\r\n            setIsTyping(currentConversation.typing)\r\n        }\r\n    }, [currentConversation.typing]);\r\n    return (\r\n        (defaultView) ? \r\n            <Row>\r\n                <Col xs='3'></Col>\r\n                <Col className=\"mt-5 lead\" style={{ opacity: 0.87, color: \"#404040\" }}>\r\n                    <span style={{ marginTop: 'auto' }}>Click a conversation</span>\r\n                </Col>\r\n                <Col  xs='3'></Col>\r\n            </Row>\r\n        :\r\n        <Row className=\"w-100\" style={{ marginTop: 75 }}>\r\n            {(size.width > 768 ? <Col style={{ minWidth: \"240px\", maxWidth: \"240px\" }}></Col> : \"\")}\r\n            <Col style={{ paddingLeft: (size.width > 768) ? \"0%\" : \"3%\" }}  >\r\n                <Container fluid>\r\n                    <Row style={{ height: rowHeight}}>\r\n                        <Col ref={colRef} onScroll={handleScroll} className=\"ul\" style={{ \r\n                            bottom: 150, \r\n                            paddingBottom: 50, \r\n                            paddingTop: 100,\r\n                            height: rowHeight - 10, \r\n                            overflowY: \"scroll\",\r\n                            position: \"fixed\", \r\n                            paddingLeft: \"20px\",\r\n                            paddingRight: \"85px\",\r\n                            width: (size.width > 768) ? (size.width - 240) : size.width,\r\n                            maxWidth: (size.width > 768) ? (size.width - 240): size.width }}\r\n                        >\r\n                            {messages.map((message, idx) => {\r\n                                return (\r\n                                    <Row  key={message.id + \"row\"} className=\"messages-list-item\">\r\n                                        <MessageListItem key={message.id} message={message} isBottom={(idx >= (messages.length - 1))}></MessageListItem>\r\n                                    </Row>\r\n                                )\r\n                                }\r\n                            )}\r\n                        </Col>\r\n                    </Row>\r\n                    {\r\n                    (isTyping || loadingMessages) ? (\r\n                    <Row>\r\n                        <Container key={Math.random()} style={{ position: \"fixed\", bottom: 120 }} className=\"typing-list-item-container\" fluid>\r\n                                <Row className=\"mt-1 mb-1\">\r\n                                <Col xs=\"1\"></Col>\r\n                                <Col xs=\"9\" className=\"text-left\">\r\n                                    <div className=\"p-2 m-1 text-white typing-list-item\"\r\n                                        style={{ borderRadius: \"18px\", \r\n                                        display:\"inline-block\", \r\n                                        whiteSpace: \"nowrap\", \r\n                                        backgroundColor: \"#1E3D64\"}}>\r\n                                        {\r\n                                            (loadingMessages) ? (\r\n                                                <span>\r\n                                                    <span className='font-italic text-muted' style={{ fontSize: '18pt' }}>Loading Messages</span>\r\n                                                    &nbsp;&nbsp;<Spinner animation=\"grow\" size=\"lg\" />\r\n                                                </span>\r\n                                            ) : \"\"\r\n                                        } \r\n                                        {\r\n                                            (isTyping) ? ( \r\n                                                <span>\r\n                                                    <Spinner animation=\"grow\" size=\"lg\" />\r\n                                                    <Spinner animation=\"grow\" size=\"lg\" />\r\n                                                    <Spinner animation=\"grow\" size=\"lg\" />\r\n                                                </span>) : \"\"\r\n                                        }   \r\n                                    </div>\r\n                                </Col>\r\n                                <Col xs=\"3\" className=\"text-center\">\r\n                                </Col>\r\n                                </Row>\r\n                                <Row className=\"\" style={{ marginTop: -10 }}>\r\n                                        <Col xs=\"9\" className=\"text-left pl-4\">\r\n                                            <span className=\"font-italic text-left text-muted\"></span>\r\n                                        </Col>\r\n                                        <Col xs=\"3\" className=\"text-center\">\r\n                                        </Col>\r\n                                </Row>\r\n                        </Container>\r\n                    </Row>\r\n                    ) : \"\"\r\n                    }\r\n                </Container>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport { Container, Row } from 'react-bootstrap'\r\nimport CurrentConversationMessageBox from './CurrentConversationMessageBox';\r\nimport CurrentConversationMessagesListView from './CurrentConversationMessagesListView';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {\r\n    selectView\r\n  } from './conversationsSlice';\r\nimport useWindowSize from '../sidebar/windowSize'\r\nimport {\r\n    selectCurrentConversation, setCurrentConversation\r\n} from './conversationsSlice';\r\nimport QuestionAnswerIcon from '@material-ui/icons/QuestionAnswer';\r\nimport { setTopbarMessage } from '../uiSlice';\r\nexport default function CurrentConversationContainer(){\r\n    const size = useWindowSize();\r\n    const defaultView = useSelector(selectView);    \r\n    return (\r\n        (defaultView) ?\r\n        <Container fluid>\r\n            \r\n        </Container>\r\n        :\r\n        <Container className=\"pl-3\" style={{ minHeight: size.height, height: size.height}} fluid>\r\n            <Row style={{ minHeight: size.height - 150, height: size.height - 150, paddingBottom: 'auto'}}>\r\n                <CurrentConversationMessagesListView defaultView={defaultView} style={{ minHeight: size.height, height: size.height}}></CurrentConversationMessagesListView>\r\n            </Row>\r\n            <Row style={{ minHeight: 20 }}>\r\n\r\n            </Row>  \r\n            <Row className=\"pb-2\">\r\n                <CurrentConversationMessageBox></CurrentConversationMessageBox>\r\n            </Row>  \r\n            <Row style={{ minHeight: 20 }}>\r\n\r\n            </Row>  \r\n        </Container>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport useWindowSize from './windowSize'\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport { Container, Row, Col, Dropdown, InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport \"./sidebar.css\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { removeConversation, selectConversations, setCurrentConversation, selectShowConvList, setShowConvList, selectCurrentConversation  } from '../currentConversation/conversationsSlice';\r\nimport { setView } from '../currentConversation/conversationsSlice';\r\nimport { selectAccount } from '../account/accountSettingsSlice' ;\r\nimport { SearchOutlined } from '@material-ui/icons';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport { setTopbarMessage } from '../uiSlice';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { selectSidebarState } from '../uiSlice';\r\nimport { chatSocket } from '../socket/chatSocket';\r\nimport regex from '../regex';\r\n\r\nconst getMinWidthListItem = (narrowScreen, deleted, showConvList) => {\r\n    if((narrowScreen || deleted) && showConvList){\r\n        //Only show conversation list, aka sidebar\r\n        return \"450px\";\r\n    } else if(narrowScreen && !showConvList) {\r\n        //Only show current conversation, hide sidebar  \r\n        return \"0px\";\r\n    } else if(!narrowScreen && !showConvList) {\r\n        //Narrow sidebar for wider screens\r\n        return \"200px\";\r\n    } else {\r\n        return \"200px\";\r\n    } \r\n}\r\n\r\nconst getButtonMargin = (narrowScreen, showConvList) => {\r\n    if(narrowScreen && showConvList){\r\n        //Only show conversation list, aka sidebar\r\n        return \"150px\";\r\n    } else if(narrowScreen && !showConvList) {\r\n        //Only show current conversation, hide sidebar  \r\n        return \"0px\";\r\n    } else if(!narrowScreen && !showConvList) {\r\n        //Narrow sidebar for wider screens\r\n        return \"-5px\";\r\n    } else {\r\n        return \"-5px\";\r\n    } \r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    animate_in: {\r\n        width: 0,\r\n        visibility: \"invisible\",\r\n        flexShrink: 0,\r\n        animationName: \"fadeout\",\r\n        animationDuration: \"1s\"\r\n    },\r\n    animate_out: {\r\n        width: \"200px\",\r\n        flexShrink: 0,\r\n        animationName: \"fadeout\",\r\n        animationDuration: \"1s\"\r\n    },\r\n    '@keyframes fadeout': {\r\n        '0%': {\r\n            width: \"25%\"\r\n        },\r\n        '100%': {\r\n            width: 0,\r\n            display: \"none\",\r\n            opacity: 1\r\n        },\r\n    },\r\n    '@keyframes fadein': {\r\n        '0%': {\r\n            width: 0,\r\n            opacity: 0\r\n        },\r\n        '100%': {\r\n            width: \"25%\",\r\n            opacity: 1\r\n        }\r\n    },\r\n    narrowPaper: {\r\n        minWidth: \"240px\",\r\n        maxWidth: \"240px\",\r\n        backgroundColor: \"#222222\",\r\n        opacity: 0.8\r\n      },\r\n    hidePaper: {\r\n        backgroundColor: \"#222222\",\r\n        width: \"0%\",\r\n    },\r\n    fullDrawerPaper: {\r\n        width: \"100%\",\r\n        backgroundColor: \"#222222\"\r\n    },\r\n    drawerContainer: {\r\n      backgroundColor: \"#222222\",\r\n      color: \"white\",\r\n      paddingRight: \"20px\",\r\n      overflowX: \"hide\"\r\n    },\r\n}));\r\n\r\nexport function ConversationListItem({ conversation, selectConversation, deleteConversation, selected, minWidth, buttonMargin }) {\r\n    return (<ListItem onClick={() => selectConversation(conversation)} key={conversation.id} className={(selected) ? \"sidebar-list-item light-selected\" : \"sidebar-list-item light-hover\"} style={{ backgroundColor: \"#222222\" }} >\r\n        <Container fluid style={{ backgroundColor: \"#222222\" }} className={(selected) ? \"light-selected\" : \"light-hover\"} >\r\n            <Row style={{ backgroundColor: \"#222222\" }} className={(selected) ? \"light-selected\" : \"light-hover\"}>\r\n                <Col className={(selected) ? \"conv-info light-selected\" : \"conv-info light-hover\"} style={{ minWidth: minWidth }}>\r\n                    <Container fluid className={(selected) ? \"light-selected\" : \"light-hover\"}>\r\n                        <Row className=\"font-italic text-primary\" style={{ fontSize: \"11pt\", minWidth: minWidth  }}>\r\n                            {conversation.conversationName}\r\n                        </Row>\r\n                        <Row className=\"w-100\" style={{ fontSize: \"9pt\" }}>\r\n                            <div className=\"ml-1 d-block text-truncate\">\r\n                                {conversation.messages[0].body}            \r\n                            </div>\r\n                        </Row>\r\n                        <Row className=\"lead w-100 mt-1\" style={{ fontSize: \"8pt\"}}>\r\n                            <div className=\"ml-1 d-block font-italic\">\r\n                                {new Date(Date.parse(conversation.createdAt)).toLocaleString('en-US')}   \r\n                            </div>\r\n                        </Row>\r\n                    </Container>\r\n                </Col>\r\n                <Col className={(selected) ? \"hide-conv-info text-right light-selected\" : \"hide-conv-info text-right light-hover\"}\r\n                style={{ backgroundColor: \"#222222\", marginLeft: buttonMargin }}>\r\n                    <Container className={(selected) ? \"light-selected\" : \"light-hover\"} style={{ backgroundColor: \"#222222\" }} fluid>\r\n                        <Dropdown className={(selected) ? \"light-selected\" : \"light-hover\"} style={{ backgroundColor: \"#222222\", marginLeft: \"-20px\"}}>              \r\n                            <Dropdown.Toggle \r\n                                className=\"dropdown-toggle-conv-info text-white\"\r\n                                style={{ border:\" none\", backgroundColor: \"#222222\"}} \r\n                                as={Button} variant=\"dark\" id=\"dropdown-custom-components\">\r\n                                <MoreVertIcon></MoreVertIcon>\r\n                            </Dropdown.Toggle>\r\n                            <Dropdown.Menu style={{ backgroundColor: \"#222222\"}} className=\"my-dropdown shadow text-white text-center\">        \r\n                                <Dropdown.Item  \r\n                                    className=\"text-white shadow conv-dropdown p-2\" \r\n                                    as=\"button\" onClick={ \r\n                                        (e) =>\r\n                                        {\r\n                                            e.preventDefault();\r\n                                            e.stopPropagation();\r\n                                            if(deleteConversation) deleteConversation(conversation.id);\r\n                                        }}>\r\n                                    Delete&nbsp;<DeleteOutlineIcon></DeleteOutlineIcon>\r\n                                </Dropdown.Item>                                                    \r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </Container>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    </ListItem>);\r\n}\r\n\r\nexport default function Sidebar(){\r\n    const size = useWindowSize();\r\n    const classes = useStyles();\r\n    const narrowScreen = size.width < 768;\r\n    let conversations = useSelector(selectConversations);\r\n    let [filteredConversations, setFilteredConversations] = useState([]);\r\n    const dispatch = useDispatch();\r\n    const showConvList = useSelector(selectShowConvList);\r\n    const account = useSelector(selectAccount);\r\n    const [searchBar, setSearchBar] = useState(\"\");\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const currentConversation = useSelector(selectCurrentConversation);\r\n    const sidebarState = useSelector(selectSidebarState);\r\n    const [searchScreen, setSearchScreen] = useState(false);\r\n    const [error, setError] = useState(false);\r\n    const [deleted, setDeleted] = useState(false);\r\n\r\n    const getPaper = () => {\r\n        if((narrowScreen || deleted) && showConvList){\r\n            //Only show conversation list, aka sidebar\r\n            return classes.fullDrawerPaper;\r\n        } else if(narrowScreen && !showConvList) {\r\n            //Only show current conversation, hide sidebar  \r\n            return classes.hidePaper;\r\n        } else if(!narrowScreen && !showConvList) {\r\n            //Narrow sidebar for wider screens\r\n            return classes.narrowPaper;\r\n        } else {\r\n            return classes.narrowPaper;\r\n        }  \r\n    }\r\n\r\n    const searchChatNames = () => {\r\n        setError(false);\r\n        if(searchBar.length > 4){\r\n            if(regex.conversationName.test(searchBar) === false) {\r\n                console.log(\"Input failed for searching a conversation name\");\r\n                setError(true);\r\n                return; \r\n            }\r\n            const anyConvs = conversations.filter(conv => conv.conversationName.includes(searchBar) || searchBar.includes(conv.conversationName));\r\n            if(anyConvs.length > 0) {\r\n                setFilteredConversations(anyConvs);\r\n                setSearchScreen(true);\r\n            } else {\r\n                setError(true);\r\n            }\r\n        } else setError(true);\r\n    }\r\n\r\n    const selectConversation = (el) => {\r\n        if(!el.pending){\r\n            console.log(\"Setting current conversation...\", el);\r\n            console.log(history, location);\r\n            setDeleted(false);\r\n            if(location.pathname !== '/home'){\r\n                history.push('/home');\r\n            }\r\n            if(currentConversation.conversationName === el.conversationName){\r\n                //dispatch(setCurrentConversation({conversation: el }));\r\n                dispatch(setView(false)); \r\n                dispatch(setShowConvList(false));\r\n                return; //Speaks for itself\r\n            }\r\n            if(el && el.conversationName !== '' && size.width > 768 && (currentConversation.conversationName !== el.conversationName)){\r\n                //Wide screen shows name\r\n                dispatch(setTopbarMessage(el.conversationName));\r\n            }  \r\n            if(el && el.conversationName !== '' && size.width <= 768 && (currentConversation.conversationName !== el.conversationName)) {\r\n                //Narrow screen only icon\r\n                dispatch(setTopbarMessage(\"\")); \r\n            }\r\n            dispatch(setView(false)); //Set NOT default view\r\n            dispatch(setCurrentConversation({conversation: el })); //Speaks for itself\r\n            //Now that we set the current conv, we going to notify server\r\n            if(chatSocket){\r\n                chatSocket.emit('setCurrentConversation', { user: account, conversationId: el.id }, \r\n                () => console.log(\"Emitted setCurrentConversation successfully\"));\r\n            }\r\n            dispatch(setShowConvList(false)); //Sidebar not showing or narrow\r\n        } else {\r\n            console.log(`Conversation is pending invite accept`, el);\r\n            return;\r\n        }\r\n    }\r\n\r\n    const deleteConversation = (convId) => {\r\n        console.log(\"Deleting Conversation \" + convId);\r\n        if(currentConversation && (currentConversation.id === convId)){\r\n            dispatch(setShowConvList(true)); \r\n            dispatch(setTopbarMessage(\"\"));\r\n            setDeleted(true);\r\n        }\r\n        dispatch(removeConversation({ id: convId }));\r\n    }\r\n\r\n    if(Array.isArray(conversations) && conversations.length > 1){\r\n        conversations = conversations.filter((value, index, self) => {\r\n            return self.indexOf(value) === index;\r\n        })\r\n    }\r\n    \r\n    const listItemMinWidth = getMinWidthListItem(narrowScreen, deleted, showConvList);\r\n    const buttonMargin = getButtonMargin(narrowScreen, showConvList);\r\n    return (\r\n        <Drawer\r\n            variant=\"permanent\"\r\n            classes={{\r\n                paper: getPaper()\r\n            }}\r\n        >\r\n            <Toolbar />\r\n            <div className={classes.drawerContainer}>\r\n                <List style={{ opacity: 0.8 }}>\r\n                <ListItem style={{ maxWidth: \"500px\", maxHeight: \"120px\" }} className=\"text-small text-center mx-auto\" selected={false} key='sidebar-search'>\r\n                   <Container fluid>\r\n                        <InputGroup className=\"mx-auto\">\r\n                                <FormControl\r\n                                    style={{ textAlign: \"center\" }}\r\n                                    placeholder=\"Search\"\r\n                                    aria-label=\"Search\"\r\n                                    aria-describedby=\"basic-addon1\"\r\n                                    onChange={ e => setSearchBar(e.target.value) }\r\n                                    className=\"mx-auto lead form-control-custom\"\r\n                                    autoComplete=\"new-password\"\r\n                                />  \r\n                                <InputGroup.Append style={{ maxWidth: \"30px\" }}>\r\n                                    <Tooltip title=\"Search Chat Names\">\r\n                                        <Button variant=\"dark\" onClick={() => searchChatNames()} className=\"custom-sidebar-search-button\" style={{ backgroundColor: \"#404040\", border: \"none\" }}><SearchOutlined className={(error) ? \"error-icon\" : \"\"} style={{ color: \"#EEEEEE\" }}></SearchOutlined></Button>\r\n                                    </Tooltip>\r\n                                    {\r\n                                      (searchScreen) ?  \r\n                                        <Tooltip title=\"Exit Search\">\r\n                                            <Button variant=\"dark\" onClick={() => setSearchScreen(false)} className=\"custom-sidebar-search-button\" style={{ backgroundColor: \"#404040\", border: \"none\" }}>X</Button>\r\n                                        </Tooltip>\r\n                                        : \"\"\r\n                                    }\r\n                                    \r\n                                </InputGroup.Append>      \r\n                        </InputGroup>\r\n                   </Container>\r\n                </ListItem>\r\n                    {                           \r\n                    (searchScreen) ? \r\n                            filteredConversations.map((conversation) => {\r\n                            if(conversation.pending === true){\r\n                                return \"\"\r\n                            }\r\n                            return ( <ConversationListItem\r\n                                        conversation={conversation}\r\n                                        selectConversation={selectConversation}\r\n                                        deleteConversation={deleteConversation}\r\n                                        buttonMargin={buttonMargin} \r\n                                        selected={currentConversation.conversationName === conversation.conversationName} \r\n                                        minWidth={listItemMinWidth}\r\n                                        key={conversation.id}\r\n                                    />) })\r\n                    :\r\n                        conversations.map((conversation) => {\r\n                            if(conversation.pending === true){\r\n                                return \"\"\r\n                            }\r\n                            return ( <ConversationListItem\r\n                                conversation={conversation}\r\n                                selectConversation={selectConversation}\r\n                                deleteConversation={deleteConversation}\r\n                                buttonMargin={buttonMargin} \r\n                                selected={currentConversation.conversationName === conversation.conversationName} \r\n                                minWidth={listItemMinWidth}\r\n                                key={conversation.id}\r\n                            />) })\r\n                    }\r\n                </List>\r\n            </div>\r\n        </Drawer>\r\n    )\r\n}","import React from 'react'; \r\nimport {\r\n    selectShowConvList\r\n} from '../currentConversation/conversationsSlice'; \r\nimport ChatSocket from '../socket/chatSocket';\r\nimport { Container } from 'react-bootstrap'; \r\nimport CurrentConversationContainer from '../currentConversation/CurrentConversationContainer';\r\nimport { useSelector } from 'react-redux'; \r\nimport Sidebar from '../sidebar/Sidebar';\r\n\r\nexport default function Home(){ \r\n    const showConvList = useSelector(selectShowConvList)\r\n    return (showConvList) ? (<Sidebar></Sidebar>) :\r\n    (\r\n      <div className=\"w-100 h-100\">\r\n        <ChatSocket></ChatSocket>\r\n        <Sidebar></Sidebar>\r\n        <Container fluid className=\"w-100 h-100\">\r\n          <CurrentConversationContainer className=\"w-100 h-100\"></CurrentConversationContainer>\r\n        </Container>\r\n      </div>\r\n    )\r\n  }   ","import { useEffect } from 'react';\r\nimport io from \"socket.io-client\";\r\nimport { selectAccount } from '../account/accountSettingsSlice';\r\nimport { selectToken } from '../auth/authSlice';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport {\r\naddConversation,\r\nremoveConversation,\r\nselectConversations\r\n} from '../currentConversation/conversationsSlice';\r\n\r\nimport {\r\naddFriend,\r\nremoveFriend,\r\naddFriendRequest,\r\nselectFriends,\r\ndeclineRequest,\r\nacceptRequest,\r\nselectFriendRequests\r\n} from '../account/friendsSlice';\r\n\r\nimport { addReceivedInvite, addSentInvite, selectReceived, selectSent } from '../topbar/inviteSlice';\r\nimport { toast } from 'react-toastify';\r\nimport { selectHost } from '../store/store';\r\n\r\nlet notificationSocket = null;\r\n\r\nconst socketEvents = {\r\n    received: {\r\n        connectSuccess: \"connectSuccess\",\r\n        connectError: \"connectError\",\r\n        inviteReceived: \"inviteReceived\",\r\n        inviteSent: \"inviteSent\",\r\n        inviteSentError: \"inviteSentError\",\r\n        acceptedInvite: \"acceptedInvite\",\r\n        acceptInviteError: \"acceptInviteError\",\r\n        friendRequestSent: \"friendRequestSent\",\r\n        friendRequestSentError: \"friendRequestSentError\",\r\n        friendRequestDeclined: \"friendRequestDeclined\",\r\n        friendRequestDeclinedError: \"friendRequestDeclinedError\",\r\n        friendAdded: \"friendAdded\",\r\n        acceptFriendRequestError: \"acceptFriendRequestError\",\r\n        friendRemoved: \"friendRemoved\",\r\n        friendRemovedError: \"friendRemovedError\"\r\n    },\r\n    sent: {\r\n        connect: \"connect\",\r\n        disconnect: \"disconnect\",\r\n        sendInvite: \"sendInvite\",\r\n        acceptInvite: \"acceptInvite\",\r\n        sendFriendRequest: \"sendFriendRequest\",\r\n        declineFriendRequest: \"declineFriendRequest\",\r\n        acceptFriendRequest: \"acceptFriendRequest\",\r\n        removeFriend: \"removeFriend\",\r\n    }\r\n}\r\n\r\nconst idExists = (id, collection) => {\r\n    let res = false;\r\n    if(collection && Array.isArray(collection)){\r\n        for(let el of collection){\r\n            if(el.id === id){\r\n                res = true\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\nconst inviteExists = (id, invites) => {\r\n    return idExists(id, invites);\r\n}\r\n\r\nconst friendExists = (id, friends) => {\r\n    return idExists(id, friends);\r\n}\r\n\r\nconst requestExists = (id, requests) => {\r\n    return idExists(id, requests);\r\n}\r\n\r\nconst setupEventListeners = (notificationSocket, dispatch, account, friends, requests, conversations, sentInvites, receivedInvites) => {\r\n    //After passing an enormous amount of shit, this function sets up the notification socket.\r\n    //I need to refactor this, document. I pulled it out of the \"notifications socket\" component below... \r\n    //TODO\r\n    notificationSocket.on(socketEvents.received.connectSuccess, (msg) => {\r\n        console.log(`Successfully connected to notifications namespace with client ID | ${msg.clientId}`);\r\n    });\r\n\r\n    notificationSocket.on(socketEvents.received.connectError, (msg) => {\r\n        console.log(`Error: cannot connect to notifications namespace... error from server | ${msg.err}`);\r\n    });\r\n\r\n    notificationSocket.on(socketEvents.received.inviteReceived, (msg) => {\r\n        try {\r\n            console.log(`Handle invite received from user @${msg.user.tagName}`);\r\n            if(inviteExists(msg.invite.id, receivedInvites)){\r\n                console.log(`Error: Invite already received with ID | ${msg.invite.id} |`);\r\n                return;\r\n            }\r\n            if(msg.invite.recipientId === account.id && msg.conv){\r\n                if(conversations){ //Conversations list exists in state\r\n                    if(0 === conversations.filter(el => el.id === msg.invite.conversationId).length){\r\n                        //conversations list doesn't contain the invite's conversation ID, so length is 0\r\n                        //Probably a better way to do this...\r\n                        //So basically, add a new invite/conversation \r\n                        dispatch(addConversation({ conversation: msg.conv }));\r\n                        msg.invite.sender = msg.user;\r\n                        //Set the sender to the received user\r\n                        dispatch(addReceivedInvite(msg.invite));\r\n                        console.log(`Handle invite received successfully from user @${msg.user.tagName} for new conversation ${msg.conv.id}`);\r\n                        toast.info(`Invite received from: @${msg.invite.user.tagName}` , { position: \"top-center\", hideProgressBar: true, pauseOnHover: true} );\r\n                    }\r\n                }\r\n            } \r\n        } catch(err) {\r\n            console.log(`Error: Handle invite received error | ${err}`);\r\n        }\r\n    });\r\n\r\n    notificationSocket.on(socketEvents.received.inviteSent, (msg) => {\r\n        try {\r\n            console.log(`Handle invite successfully sent event for conversation ${msg.conv.id}`);\r\n            if(inviteExists(msg.invite.id, sentInvites)){\r\n                console.log(`Error: Invite already sent with ID | ${msg.invite.id} |`);\r\n                return;\r\n            }\r\n            if(msg && msg.conv && msg.invite){\r\n                dispatch(addSentInvite(msg.invite));\r\n                console.log(`Invite | ${msg.invite.id} | for conversation | ${msg.conv.id} | saved and successfully added to state`);\r\n                toast.info(`Invite successfully sent!` , { position: \"top-center\", hideProgressBar: true, pauseOnHover: true });\r\n            } else {\r\n                throw `Error: Invite sent data received from the server is malformed | ${msg}`;\r\n            }\r\n        } catch(err) {\r\n            console.log(\"Error with sending invite from server\", err);\r\n        }\r\n    });\r\n\r\n    notificationSocket.on(socketEvents.received.inviteSentError, (msg) => {\r\n        console.log(`Handle invite sent error from server | ${msg.msg}`);\r\n    });\r\n\r\n    notificationSocket.on(socketEvents.received.acceptedInvite, (msg) => {\r\n        console.log(`Handle conversation invite accepted by user ID | ${msg.invite.recipientId}`); \r\n        if(msg.conv && msg.invite && msg.invite.senderId === account.id){\r\n            //Event from server, with NOT pending conversation object, emitted to the sender of the conversation invite\r\n            console.log(`Setting conversation with ID | ${msg.conv.id} | to not pending for sender`); \r\n            dispatch(removeConversation({ id: msg.conv.id }));\r\n            dispatch(addConversation({ conversation: msg.conv }));\r\n            const user = friends.filter(el => el.id === msg.invite.recipientId)[0];\r\n            if(user) toast.info(`Conversation Invite accepted by @${user.tagName}` , { position: \"top-center\", hideProgressBar: true, pauseOnHover: true} );\r\n            else console.log(`Error: friend with ID | ${msg.invite.senderId} | does not exist, cannot accept conversation!`, msg.invite, friends);\r\n            return;\r\n        } else if(msg.conv && msg.invite && msg.invite.recipientId === account.id){\r\n            //Event from server, with NOT pending conversation object, emitted back to the recipient of the conversation invite after they accept\r\n            console.log(`Setting conversation with ID | ${msg.conv.id} | to not pending`); \r\n            //dispatch(removeConversation({ id: msg.conv.id }));\r\n            dispatch(addConversation({ conversation: msg.conv }));\r\n            const user = friends.filter(el => el.id === msg.invite.senderId)[0];\r\n            if(user) toast.info(`Conversation Invite accepted by @${user.tagName}` , { position: \"top-center\", hideProgressBar: true, pauseOnHover: true} );\r\n            else console.log(`Error: friend with ID | ${msg.invite.senderId} | does not exist, cannot accept conversation!`, msg.invite, friends);\r\n            return;\r\n        } else {\r\n            console.log(`Error: accepted invite data from server incorrectly formatted!`, msg);\r\n        }\r\n    });    \r\n\r\n    notificationSocket.on(socketEvents.received.acceptInviteError, (msg) => {\r\n        console.log(`Handle accept invite error from server | ${msg.msg}`);\r\n    });\r\n\r\n    notificationSocket.on(socketEvents.received.friendRequestSent, (msg) => {\r\n        console.log(`Handle friend request sent event`);\r\n        if(msg && msg.friendRequest){\r\n            const recId = msg.friendRequest.recipientId;\r\n            const senderId = msg.friendRequest.sender.id;\r\n            if(recId === account.id){\r\n                //Recipient of friend request\r\n                if(friendExists(senderId, friends)){\r\n                    console.log(`Error: Cannot receive a friend request from user that is already in friend's list!`, msg.friendRequest.sender, friends);\r\n                    return;\r\n                } else {\r\n                    dispatch(addFriendRequest(msg.friendRequest));\r\n                    toast.info(`Friend request received from user @${msg.friendRequest.sender.tagName}`, { position: \"top-center\", hideProgressBar: true, pauseOnHover: true} );\r\n                    console.log(`Successfully received friend request with ID | ${msg.friendRequest.id} | and added to state`);\r\n                    return;\r\n                }\r\n            } else if(senderId === account.id){\r\n                //Sender of friend request\r\n                if(friendExists(recId, friends)){\r\n                    console.log(`Error: Cannot send a friend request to a user that is already in friend's list!`, msg.friendRequest.recipientId, friends);\r\n                    return;\r\n                } else {\r\n                    dispatch(addFriendRequest(msg.friendRequest));\r\n                    toast.info(`Successfully sent friend request to ${msg.friendRequest.recipientId}`,  { position: \"top-center\", hideProgressBar: true, pauseOnHover: true})\r\n                    console.log(`Successfully sent friend request with ID | ${msg.friendRequest.id} | and added to state`);\r\n                    return;\r\n                }\r\n            } else {\r\n                console.log(`Error: Friend request object does not contain a user with ID equal to this account!`, msg.friendRequest);\r\n                return;\r\n            }\r\n        } else {\r\n            console.log(`Error: malformed friend request sent event message object! ${msg}`);\r\n            return;\r\n        }\r\n    });\r\n\r\n    notificationSocket.on(socketEvents.received.friendRequestSentError, (msg) => {\r\n        console.log(`Error: friend request sent server error | ${msg.msg}`);\r\n        toast.warning(`Server error: friend request not sent! ${msg.err}` , { position: \"top-center\", hideProgressBar: true, pauseOnHover: true})\r\n    });\r\n\r\n    notificationSocket.on(socketEvents.received.friendRequestDeclined, (msg) => {\r\n        console.log(`Handle friend request declined event`);\r\n        if(msg && msg.friendRequest){\r\n            const recId = msg.friendRequest.recipientId;\r\n            const senderId = msg.friendRequest.sender.id;\r\n            if(false === requestExists(msg.friendRequest.id, requests)){\r\n                //Request doesn't exist, can't decline a request that doesn't exist!\r\n                console.log(`Error: cannot mark a friend request as declined if it does not exist! Request with ID: ${msg.friendRequest.id}`);\r\n                return;\r\n            } else {\r\n                if(recId === account.id){\r\n                    if(friendExists(senderId, friends)){\r\n                        console.log(`Friend exists in state. Declining new friend request will result in deleted friendship.`);\r\n                        dispatch(removeFriend(senderId));\r\n                    } \r\n                    //If you declined the friend request, check if friend exists just in case and delete \r\n                    //And mark the request in the state with the same ID as declined/cancelled (whatever the property is in this redux state compared to the database, where it's \"cancelled\" as a boolean)\r\n                    dispatch(declineRequest(msg.friendRequest.id));\r\n                    console.log(`Successfully marked friend request with ID | ${msg.friendRequest.id} | as declined in state`, requests);\r\n                    return;\r\n                } else if(senderId === account.id){\r\n                    //If you sent the request and now it's being declined, check if friend exists and delete\r\n                    //Mark the request in the state as declined \r\n                    //Ensure that the user cannot request friendship with the user in the future (save the request, mark it as cancelled, on next outbound friendRequestSend check for any requests with same user ID && cancelled/declined)\r\n                    if(friendExists(recId, friends)){\r\n                        console.log(`Friend exists in state. Declined friend request will result in deleted friendship.`);\r\n                        dispatch(removeFriend(recId));\r\n                    } \r\n                    dispatch(declineRequest(msg.friendRequest.id));\r\n                    toast.warning(`Friend request declined`, { position: \"top-center\", hideProgressBar: true, pauseOnHover: true});\r\n                    console.log(`Successfully marked friend request with ID | ${msg.friendRequest.id} | as declined in state`, requests);\r\n                    return;\r\n                } else {\r\n                    console.log(`Error: cannot mark friend request as declined. Current user is not friend request sender or recipient`);\r\n                    return;\r\n                }\r\n            }\r\n        } else {\r\n            console.log(`Error: cannot mark friend request as declined. Malformed message object from the server`);\r\n            return;\r\n        }\r\n    });\r\n\r\n    notificationSocket.on(socketEvents.received.friendRequestDeclinedError, (msg) => {\r\n        console.log(`Error: server error while declining friend request ${msg.msg}`);\r\n    });\r\n\r\n    notificationSocket.on(socketEvents.received.friendAdded, (msg) => {\r\n        console.log(`Handle friend added event`);\r\n        if(msg && msg.friendRequest && msg.acceptor){\r\n            const requestId = msg.friendRequest.id;\r\n            const sender = msg.friendRequest.sender;\r\n            const acceptor = msg.acceptor;\r\n            const acceptorId = acceptor.id;\r\n            //First check for the request and mark it as accepted \r\n            //If it doesn't error out\r\n            if(requestExists(requestId, requests)){\r\n                console.log(`Marking request with ID | ${requestId} | as accepted in the state`);\r\n                dispatch(acceptRequest(requestId));\r\n            } else {\r\n                console.log(`Error: Friend Request with ID | ${requestId} | does not exist, cannot mark as accepted and add friend from it`);\r\n                return;\r\n            }\r\n            if(acceptorId === account.id){\r\n                //This user accepted the friendship, will add SENDER profile into redux state \r\n                //First, check if exists in friends already, return if so\r\n                if(friendExists(sender.id, friends)){\r\n                    console.log(`Error: cannot add new friend that already exists`, friends, sender);\r\n                    return;\r\n                } else {\r\n                    console.log(`Adding new friend @${sender.tagName} to friend's list`, sender);\r\n                    dispatch(addFriend(sender));\r\n                    return;\r\n                }\r\n            } else if(sender.id === account.id) {\r\n                //This user sent the request, and it was accepted by the other user. Now they input the \r\n                //acceptor profile into the redux state\r\n                if(friendExists(acceptorId, friends)){\r\n                    console.log(`Error: cannot add new friend that already exists`, friends, acceptor);\r\n                    return;\r\n                } else {\r\n                    console.log(`Adding new friend @${acceptor.tagName} to friend's list`, acceptor);\r\n                    dispatch(addFriend(acceptor));\r\n                    return;\r\n                }\r\n            } else {\r\n                console.log(`Error: Friend request sender and recipient do not have IDs associated with current user`, msg.friendRequest, account.id);\r\n                return;\r\n            }\r\n        } else {\r\n            console.log(`Error: received friend request object from server is malformed`, msg);\r\n            return;\r\n        }\r\n    });\r\n\r\n    notificationSocket.on(socketEvents.received.acceptFriendRequestError, (msg) => {\r\n        console.log(`Error: server error while accept friend request action performed ${msg.msg}`);\r\n    });\r\n\r\n    notificationSocket.on(socketEvents.received.friendRemoved, (msg) => {\r\n        console.log(`Handle friend removed event`);\r\n        if(msg && msg.exFriend1 && msg.exFriend2){\r\n            const friend1 = msg.exFriend1;\r\n            const friend2 = msg.exFriend2;\r\n            if(friend1 === account.id){\r\n                if(friendExists(friend2, friends)){\r\n                    const friend = friends.filter(el => el.id === friend2)[0];\r\n                    console.log(`Removing friend from friend's list`, friend);\r\n                    dispatch(removeFriend(friend2));\r\n                    return;\r\n                } else {\r\n                    console.log(`Error: friend with ID | ${friend2} | does not exist in friend's list, cannot remove`);\r\n                    return;\r\n                }\r\n            } else if(friend2 === account.id){\r\n                if(friendExists(friend1, friends)){\r\n                    const friend = friends.filter(el => el.id === friend1)[0];\r\n                    console.log(`Removing friend from friend's list`, friend);\r\n                    dispatch(removeFriend(friend1));\r\n                    return;\r\n                } else {\r\n                    console.log(`Error: friend with ID | ${friend1} | does not exist in friend's list, cannot remove`);\r\n                    return;\r\n                }\r\n            } else {\r\n                console.log(`Error: remove friend event does not have IDs associated with the current user or user's friend list`, friends, msg);\r\n                return;\r\n            }\r\n        } else {\r\n            console.log(`Error: remove friend event handler received a malformed message object from server`, msg);\r\n        }\r\n    });\r\n    notificationSocket.on(socketEvents.received.friendRemovedError, (msg) => {\r\n        console.log(`Error: Friend removed server error | ${msg.msg}`);\r\n    });\r\n}\r\n\r\nexport default function NotificationSocket(){\r\n    const account = useSelector(selectAccount)\r\n    const token = useSelector(selectToken)\r\n    const dispatch = useDispatch();\r\n    const conversations = useSelector(selectConversations)\r\n    const host = useSelector(selectHost);\r\n    const sentInvites = useSelector(selectSent);\r\n    const receivedInvites = useSelector(selectReceived);\r\n    const friends = useSelector(selectFriends);\r\n    const requests = useSelector(selectFriendRequests);\r\n\r\n    const teardownEventListeners = (notificationSocket) => {\r\n        if(notificationSocket == null || !notificationSocket){\r\n            return true;\r\n        }\r\n        for(let key in socketEvents.received){\r\n            notificationSocket.off(socketEvents.received[key]);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const notificationSocketOptions = {\r\n            transportOptions: {\r\n                polling: {\r\n                    extraHeaders: {\r\n                        Authorization: `Bearer ${token}`\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if(account.loggedIn === true){\r\n            try {\r\n                console.log(\"Attemping connection to notifications notificationSocket\");\r\n                notificationSocket = io(`${host}/notifications`, notificationSocketOptions);\r\n                notificationSocket.emit('refreshNotificationSocket', JSON.stringify({ userId: account.id }));\r\n                setupEventListeners(notificationSocket, dispatch, account, friends, requests, conversations, sentInvites, receivedInvites);\r\n                return () => {\r\n                    teardownEventListeners(notificationSocket);\r\n                }\r\n            } catch(err) {\r\n                console.log(\"Error establishing notifications notificationSocket\", err)\r\n            }\r\n        }\r\n        return () => {\r\n            if(notificationSocket) {\r\n                Object.keys(socketEvents.received).map(el => notificationSocket.off(el));\r\n                notificationSocket.close();    \r\n                notificationSocket = null;\r\n            }\r\n        }\r\n        \r\n    }, []);\r\n    return null;\r\n}\r\n\r\nexport { notificationSocket };","import React, { useState, useEffect, useRef } from 'react';\r\nimport { Row, Col, InputGroup, FormControl, Button, Container } from 'react-bootstrap';\r\nimport EnhancedEncryptionIcon from '@material-ui/icons/EnhancedEncryption';\r\nimport regex from '../regex';\r\nimport useWindowSize from '../sidebar/windowSize';\r\nimport './modal.css'\r\nexport default function PasswordModalBody({ handleSetConvPassword }) {\r\n    const [pw, setPW] = useState(\"\");\r\n    const [error, setError] = useState(false);\r\n    const errorMsgs = useRef([]);\r\n    const setPwRef = useRef(null);\r\n    const size = useWindowSize();\r\n\r\n    const checkInput = () => {\r\n        let passing = true;\r\n        if(regex.password.test(pw) === false) {\r\n            passing = false;\r\n            errorMsgs.current.push(\"Invalid Password. Must be 8-32 characters\");\r\n        }\r\n        if(!passing) setError(true); \r\n        return passing;\r\n    }\r\n    const submit = () => {\r\n        setError(false);\r\n        errorMsgs.current = [];\r\n        if(!checkInput()) {\r\n            console.log(\"Error with password\", errorMsgs);\r\n            return;\r\n        }\r\n        handleSetConvPassword(pw);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(setPwRef.current != null)\r\n            setPwRef.current.focus();\r\n    }, [setPwRef]);\r\n\r\n    return (\r\n        <div className=\"modal-password-set\">\r\n            <Container fluid>\r\n                <Row className=\"pt-2 pb-3\">\r\n                    <Col className=\"mx-auto text-center pt-3\">\r\n                        <EnhancedEncryptionIcon style={{ width: 42, height: 42 }}></EnhancedEncryptionIcon>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"mx-auto text-center pt-1 pb-3\">\r\n                        <h5>Set Password</h5>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"pt-2 pb-2\">\r\n                    <Col style={{ borderBottom: \"1px solid #303030\"}} className=\"mx-auto text-center\" xs=\"10\">\r\n                        <InputGroup className=\"mb-3 mt-2 mx-auto\">\r\n                                <FormControl\r\n                                    style={{ fontSize: \"18pt\", textAlign: \"center\", color: \"white\", minHeight: '50px', border: 'none', minWidth: \"80%\", backgroundColor: \"#252525\" }}\r\n                                    placeholder=\"Enter Password\"\r\n                                    type=\"password\"\r\n                                    aria-label=\"Enter Password\"\r\n                                    aria-describedby=\"basic-addon1\"\r\n                                    onChange={ e => {\r\n                                        setPW(e.target.value);\r\n                                    }}\r\n                                    className={ (error) ? \"mx-auto lead form-control-red\" : \"mx-auto lead form-control-custom\"}\r\n                                    ref={setPwRef}\r\n                                    autoComplete=\"new-password\"\r\n                                    name=\"setPWNewConv\"\r\n                                />\r\n                        </InputGroup>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"pt-3 mt-2\">\r\n                    <Col className=\"mx-auto text-center\" xs=\"10\">\r\n                        <Button onClick={ () => submit() } variant=\"outline-success\" size=\"lg\" style={{ backgroundColor: \"#252525\", marginLeft: \"auto\", marginRight: \"auto\"}} className=\"p-3 rounded-pill\">Set Password</Button>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect, useRef } from 'react';\r\nimport { Row, Col, InputGroup, FormControl, Button, Container } from 'react-bootstrap';\r\nimport { selectAccount } from '../account/accountSettingsSlice';\r\nimport { selectFriends } from '../account/friendsSlice';\r\nimport { selectConversations } from '../currentConversation/conversationsSlice';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport useWindowSize from '../sidebar/windowSize';\r\nimport './new-conversation.css';\r\nimport regex from '../regex.js';\r\nimport { SearchOutlined } from '@material-ui/icons';\r\nimport EnhancedEncryptionIcon from '@material-ui/icons/EnhancedEncryption';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport { notificationSocket } from '../socket/notificationSocket';\r\nimport { Modal } from '@material-ui/core';\r\nimport PasswordModalBody from './SetPWModal';\r\nimport { setTopbarMessage } from '../uiSlice';\r\n\r\nfunction EnterChatName({ setConversationName, errorName }){\r\n    const enterChatRef = useRef(null);\r\n    useEffect(() => {\r\n        if(enterChatRef.current){\r\n            enterChatRef.current.focus();\r\n        }\r\n    }, [enterChatRef.current]);\r\n    return (\r\n        <Container fluid style={{ maxWidth: \"500px\" }}>\r\n            <InputGroup className=\"mt-2 mx-auto\">\r\n                <FormControl\r\n                    style={{ textAlign: \"center\", fontSize: \"22pt\", color: \"#d9534f\", minHeight: '50px', border: 'none', backgroundColor: \"#191919\" }}\r\n                    placeholder=\"Enter Chat Name\"\r\n                    aria-label=\"Enter Chat Name\"\r\n                    aria-describedby=\"basic-addon1\"\r\n                    onChange={ e => setConversationName(e.target.value) }\r\n                    className={ (errorName) ? \"mx-auto lead form-control-red\" : \"mx-auto lead form-control-custom\"}\r\n                    autoComplete=\"new-password\"\r\n                    name=\"setNameNewConv\"\r\n                    ref={enterChatRef}\r\n                    />\r\n            </InputGroup>\r\n        </Container>\r\n    )\r\n}\r\nfunction AddFriends({ \r\n        errorSearch, \r\n        selectedFriends, \r\n        setSelectedFriends, \r\n        setErrorSearch, \r\n        setError, \r\n        errorMsgs,\r\n        setButtonsDisabled\r\n    }){\r\n\r\n    const friends = useSelector(selectFriends); \r\n    const [searchBar, setSearchBar] = useState(\"\");\r\n    const [filteredFriends, setFilteredFriends] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setFilteredFriends(JSON.parse(JSON.stringify(friends)));\r\n    }, [friends]);\r\n\r\n    useEffect(() => {\r\n        if(selectedFriends.length < 1){\r\n            setButtonsDisabled(true);\r\n            console.log(\"Buttons disabled\")\r\n        } else {\r\n            setButtonsDisabled(false);\r\n            console.log(\"Buttons enabled\")\r\n        }\r\n    }, [selectedFriends]);\r\n\r\n    const filterList = () => {\r\n        setErrorSearch(false);\r\n        setError(false);\r\n        errorMsgs.current = []\r\n        if(regex.tagName.test(searchBar) === false){\r\n            setErrorSearch(true);\r\n            setError(true);\r\n            setSearchBar(\"\");\r\n            errorMsgs.current.push(\"Invalid tagname for search\");\r\n            return;\r\n        }\r\n        setFilteredFriends(filteredFriends.filter(friend => (friend.tagName.includes(searchBar) || searchBar.includes(friend.tagName))));\r\n    }\r\n    const handleCheck = (tagName, checked) => {\r\n        const arr = JSON.parse(JSON.stringify(selectedFriends));\r\n        if(checked){\r\n            if(selectedFriends.length > 0){\r\n                if(selectedFriends.filter(fr => fr === tagName).length > 1){\r\n                    return;\r\n                } else {\r\n                    arr.push(tagName)\r\n                    setSelectedFriends(arr);\r\n                    return;\r\n                }\r\n            } else {\r\n                setSelectedFriends([tagName]);\r\n                return;\r\n            }   \r\n        } else {\r\n            if(selectedFriends.length > 0){\r\n                if(selectedFriends.filter(fr => fr === tagName).length > 0){\r\n                    setSelectedFriends(selectedFriends.filter(fr => fr !== tagName));\r\n                    return;\r\n                 } else {\r\n                     return;\r\n                 }\r\n            } else {\r\n                setSelectedFriends([]);\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <Container fluid>\r\n            <Row className=\"pb-3\">\r\n                <Col xs=\"2\"></Col>\r\n                <Col xs=\"8\" className=\"border-bottom border-dark\" style={{ maxWidth: \"450px\" }}>\r\n                    <InputGroup className=\"mb-3 mt-2 mx-auto\">\r\n                        <FormControl\r\n                            style={{ textAlign: \"center\", fontSize: \"18pt\", color: \"#EEEEEE\", opacity: 0.8, minHeight: '50px', border: 'none', backgroundColor: \"#191919\" }}\r\n                            placeholder=\"Search friends\"\r\n                            aria-label=\"Search friends\"\r\n                            aria-describedby=\"basic-addon1\"\r\n                            onChange={ e => setSearchBar(e.target.value) }\r\n                            className={ (errorSearch) ? \"mx-auto lead form-control-red font-italic\" : \"mx-auto lead form-control-custom font-italic\"}\r\n                            value={searchBar}\r\n                            autoComplete=\"new-password\"\r\n                            />\r\n                        </InputGroup>\r\n                </Col>\r\n                <Col xs=\"2\" style={{ maxWidth: \"50px\" }}>\r\n                    <Button onClick={() => { filterList() }} variant=\"dark\" style={{ marginTop: \"10px\", display: \"block\", backgroundColor: \"#191919\", border: \"none\" }}><span className=\"text-primary text-lg-center\"><SearchOutlined style={{ color: \"#BBBBBB\", height: 35, width: 35, cursor: \"pointer\"}}></SearchOutlined></span></Button>\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"mb-2\">\r\n                <Col className=\"mx-auto\">\r\n                    <span className=\"font-italic text-small\" style={{ color: \"dodgerblue\"}}>Select Friends For Chat</span>\r\n                </Col>\r\n             </Row>\r\n            <Row>\r\n                <Col xs=\"2\"></Col>\r\n                <Col xs=\"8\" style={{ maxWidth: \"500px\" }}>\r\n                    <Container fluid style={{ minHeight: \"225px\", overflowY: \"scroll\", backgroundColor: \"#191919\"}}>\r\n                        {\r\n                            (filteredFriends && filteredFriends.length > 0) ?\r\n                            (\r\n                                filteredFriends.map((friend) => {\r\n                                    return (\r\n                                        <FriendListItemCheckBox key={friend.id} id={friend.id} tagName={friend.tagName} onCheck={handleCheck}></FriendListItemCheckBox>\r\n                                    );\r\n                                }) \r\n                            )\r\n                            : \r\n                            <Row className=\"mb-4\">\r\n                                <Col className=\"mx-auto text-center text-muted font-italic pt-5\">\r\n                                    No friends available! Add a friend!\r\n                                </Col>\r\n                            </Row>\r\n                        }\r\n                    </Container>\r\n                </Col>\r\n                <Col xs=\"2\"></Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction FriendListItemCheckBox({ id, tagName, onCheck }){\r\n    const [checked, setChecked] = useState(false);\r\n    const check = () => {\r\n        setChecked(!checked);\r\n    }\r\n    useEffect(() => {\r\n        onCheck(tagName, checked);\r\n    }, [checked]);\r\n    const buttonBGClass = \"p-3 m-2 account-button\";\r\n    return (\r\n        <Row className=\"p-2\">\r\n            <Col className=\"text-center justify-content-around\">\r\n                <Button onClick={() => check()} className={(checked) ? \"p-3 m-2 account-button-checked\" : \"p-3 m-2 account-button\"} variant=\"dark\" style={{ border: \"none\", backgroundColor: \"#202020\", padding: \"15px\", minWidth: \"150px\", maxWidth: \"150px\", minHeight: \"125px\", maxHeight: \"125px\" }} >@{tagName}</Button>\r\n            </Col> \r\n        </Row>    \r\n    )\r\n}\r\n\r\nexport default function NewConversation(){\r\n    const conversations = useSelector(selectConversations);\r\n    const account = useSelector(selectAccount);\r\n    const [conversationName, setConversationName] = useState(\"\");\r\n    const size = useWindowSize();\r\n    const [error, setError] = useState(false);\r\n    const [selectedFriends, setSelectedFriends] = useState([]);\r\n    const [errorName, setErrorName] = useState(false);\r\n    const [errorSearch, setErrorSearch] = useState(false);\r\n    const [buttonsDisabled, setButtonsDisabled] = useState(true);\r\n    const newName = useRef(null);\r\n    const errorMsgs = useRef([]);\r\n    const [passwordOpened, setPasswordOpened] = useState(false);\r\n    const [convPassword, setConvPassword] = useState(\"\");\r\n    const [backgroundImage, setBackgroundImage] = useState(\"\");\r\n    const dispatch = useDispatch();\r\n    const friends = useSelector(selectFriends);\r\n    const wide = size.width > 768;\r\n    const checkInput = () => {\r\n        let passing = true;\r\n        //First check if name is okay\r\n        if(regex.conversationName.test(conversationName) === false){\r\n            errorMsgs.current.push(\"Invalid Conversation Name\");\r\n            setErrorName(true);\r\n            passing = false;\r\n        }\r\n        //Next check if name already exists\r\n        if(conversations.filter(conv => conv.conversationName === conversationName).length === 1){\r\n            errorMsgs.current.push(\"Conversation with that name already exists\");\r\n            setErrorName(true);\r\n            passing = false;\r\n        }\r\n        if(passing === true){\r\n            //check each friend and if tag if it exists in friends list\r\n            let isFriends = true;\r\n            for(let friendTag of selectedFriends){\r\n                //if friends list doesnt include a friend with the tagname\r\n                if(friends.filter(fr => fr.tagName === friendTag).length === 0){\r\n                    errorMsgs.current.push(`Friend with tagname ${friend} isn't in your friends list`);\r\n                    passing = false;\r\n                    break;\r\n                }\r\n            }\r\n            //check if users are already in a conversation with you\r\n            //Deep compare the users array, filtering out self (JSON.stringify works, no functions are declared just data?)\r\n            for(let conv of conversations) {\r\n                const otherUsers = (conv.users.filter(user => user.id !== account.id)).map(user => { return user.tagName });\r\n                if(otherUsers && otherUsers.length > 0 && JSON.stringify(otherUsers) === JSON.stringify(selectedFriends)){\r\n                    errorMsgs.current.push(`Chat named \"${conv.conversationName}\" with selected friends exists`);\r\n                    passing = false;\r\n                    break;\r\n                } \r\n            }\r\n        }\r\n        if(!passing) setError(true);\r\n        return passing;\r\n    }\r\n    const handleSetConvPassword = (value) => {\r\n        setConvPassword(value);\r\n    }\r\n    const handleSetBackgroundImage = (value) => {\r\n        setBackgroundImage(value);\r\n    }\r\n    const submit = () => {\r\n        errorMsgs.current = [];\r\n        setError(false);\r\n        setErrorName(false);\r\n        setErrorSearch(false);\r\n        if(!checkInput()){\r\n            console.log(\"Errors: \", errorMsgs);\r\n            return;\r\n        } \r\n        console.log(\"Creating new conversation and sending invites to users from friends list. Users: \", selectedFriends);\r\n        for(let user of selectedFriends){\r\n            if(notificationSocket){\r\n                notificationSocket.emit('sendInvite', { sender: account, tagName: user, conversationName: conversationName }, () => {\r\n                    console.log(\"Successfully emitted send invite to user with tagname\", user);\r\n                });\r\n            }\r\n        }\r\n        toast.info(`Successfully sent out conversation invites!`,  { position: \"top-center\", hideProgressBar: true, pauseOnHover: true});\r\n    }\r\n    useEffect(() => {\r\n        if(newName && newName.current){\r\n            newName.current.focus();\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if(size.width > 768) {\r\n            dispatch(setTopbarMessage((<span>New Conversation</span>)));\r\n        } else {\r\n            dispatch(setTopbarMessage((<span>New Conversation</span>)));\r\n        }\r\n    }, [size.width]);\r\n\r\n    return (\r\n        <Container className=\"h-100 w-100\" fluid  style={{ margin: \"auto\", paddingLeft: (wide) ?  \"240px\" : \"20px\" }}>\r\n            <Row>\r\n                <Col className=\"mx-auto text-center\" style={{ opacity: 0.8, borderRadius: \"10px\", backgroundColor: \"#191919\", maxWidth: \"600px\" }}>\r\n                    <Container fluid>       \r\n                        <Row className=\"mt-2 mb-2\">\r\n                        <EnterChatName \r\n                            setConversationName={setConversationName} \r\n                            errorName={errorName}\r\n                        />\r\n                        </Row>\r\n                        <Row className=\"mt-2 mb-2 pb-2\">\r\n                            <AddFriends \r\n                                errorSearch={errorSearch} \r\n                                selectedFriends={selectedFriends}\r\n                                setSelectedFriends={setSelectedFriends}\r\n                                setErrorSearch={setErrorSearch}\r\n                                setError={setError}\r\n                                errorMsgs={errorMsgs}\r\n                                setButtonsDisabled={setButtonsDisabled}\r\n                            />\r\n                        </Row>\r\n                        <Row className=\"pt-3\">\r\n                            <Modal\r\n                                open={passwordOpened}\r\n                                onClose={() => setPasswordOpened(false)}\r\n                                aria-labelledby=\"simple-modal-title\"\r\n                                aria-describedby=\"simple-modal-description\"\r\n                            >\r\n                                <PasswordModalBody handleSetConvPassword={handleSetConvPassword} ></PasswordModalBody>\r\n                            </Modal>\r\n                            <Col className=\"mx-auto\">\r\n                                <Button \r\n                                    onClick={ () => setPasswordOpened(true) } \r\n                                    disabled={buttonsDisabled} \r\n                                    className=\"rounded-pill p-2 mx-auto\" \r\n                                    variant=\"outline-info\" \r\n                                    size=\"lg\"\r\n                                    style={{ opacity: (buttonsDisabled) ? 0.5 : 1.0, maxWidth: '200px', marginTop: \"20px\" }}\r\n                                    >\r\n                                    Set&nbsp;Password&nbsp;<EnhancedEncryptionIcon style={{ width: 25, height: 25 }}></EnhancedEncryptionIcon>\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col className=\"mx-auto\">\r\n                                <Button \r\n                                    onClick={ () => submit()} \r\n                                    disabled={buttonsDisabled} \r\n                                    className=\"rounded-pill p-2 mx-auto\" \r\n                                    variant=\"outline-success\" \r\n                                    size=\"lg\"\r\n                                    style={{ opacity: (buttonsDisabled) ? 0.5 : 1.0, maxWidth: '200px', marginTop: \"20px\" }}\r\n                                    >\r\n                                    Sent Chat Invites <SendIcon style={{ width: 25, height: 25 }}></SendIcon>\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"pt-2 mt-2\">\r\n                            <Col>\r\n                                <ul>\r\n                                    {(error) ?\r\n                                        errorMsgs.current.map(el => (<li key={el} className=\"text-danger text-small\">{el}</li>)) : \"\" }\r\n                                </ul>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Col>\r\n            </Row>\r\n        </Container>)\r\n}\r\n\r\n//TODO put this into a better place. \r\n//i.e. there is a default color that the base picture (pic/default color settable per user) fades into \r\n//     Then it is set by the user(s) after they enter the conversation\r\n// <Modal\r\n// open={backgroundOpened}\r\n// onClose={() => setBackgroundOpened(false)}\r\n// aria-labelledby=\"simple-modal-title\"\r\n// aria-describedby=\"simple-modal-description\"\r\n// >\r\n// <BackgroundModalBody handleSetBackgroundImage={handleSetBackgroundImage} ></BackgroundModalBody>\r\n// </Modal>\r\n// <Col xs=\"4\" className=\"p-2 mt-3\">\r\n// <Button variant=\"dark\"  disabled={buttonsDisabled} style={{ backgroundColor: \"#191919\", border: \"none\", opacity: (buttonsDisabled) ? 0.5 : 1.0,\r\n    \r\n// }} onClick={ () => setBackgroundOpened(true) }>\r\n// <Tooltip title=\"Set Background\">\r\n//     <InsertPhotoIcon style={{ color: \"#2499bf\", width: 50, height: 50 }}></InsertPhotoIcon>\r\n// </Tooltip>\r\n// </Button>\r\n// </Col>","import React from 'react'; \r\nimport { Container } from 'react-bootstrap';\r\nimport NewConversation from '../newConversation/NewConversation';\r\nimport Sidebar from '../sidebar/Sidebar';\r\nexport default function NewConversationScreen(){\r\n  return (\r\n    <div className=\"w-100 h-100\">\r\n      <Sidebar></Sidebar>\r\n      <Container fluid className=\"w-100 h-100\">\r\n        <NewConversation></NewConversation>\r\n      </Container>\r\n    </div>\r\n  )\r\n}","import React, { Fragment } from 'react';\r\nimport { Row, Col, Container } from 'react-bootstrap';\r\nimport './settings-modal.css';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nexport default function About() {\r\n    return (\r\n        <div className=\"settings-modal\">\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col className=\"mx-auto text-center pt-1 pb-3\">\r\n                        <h5 className=\"text-danger\">About Project Zed</h5>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"pt-2 pb-2\">\r\n                    <Col className=\"mx-auto text-center text-white\" xs=\"12\">\r\n                    <Typography>\r\n                            Blah blah blah this is my open source version of realtime e2e encrypted messaging.\r\n                            Email me at jakestevens081@gmail.com for questions. \r\n                            www.github.com/jakesteve28\r\n                    </Typography>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}","import React, { useState, useRef } from 'react';\r\nimport { Row, Col, Container, InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport './settings-modal.css';\r\nimport regex from '../../regex.js';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nexport default function ChangeTagname({ logoutAccount }) {\r\n    const [newTagname, setNewTagname] = useState(\"\");\r\n    const [tagNameError, setTagnameError] = useState(false);\r\n    const errorMsgs = useRef([]);\r\n\r\n    const checkInput = () => {\r\n        let passing = true; \r\n        if(regex.tagName.test(newTagname) === false) {\r\n            console.log(\"Error: new tagname failed regex test\");\r\n            errorMsgs.current.push(\"Error: new tagname failed regex test\");\r\n            passing = false;\r\n        }\r\n        if(!passing) setTagnameError(true);\r\n        return passing;\r\n    }\r\n\r\n    const submit = () => {\r\n        errorMsgs.current = []\r\n        setTagnameError(false);\r\n        if(!checkInput()){\r\n            return; \r\n        } else {\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"settings-modal\">\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col className=\"mx-auto text-center pt-1 pb-3\">\r\n                        <h3>Change Tagname</h3>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col className=\"mx-auto text-center pt-1 pb-3\">\r\n                        <span className=\"text-warning\">Note that this is permanent, will require a logout, and will automatically update your friends' lists.</span>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"pt-2 pb-2 mb-1\">\r\n                    <Col className=\"mx-auto text-center text-white\" xs=\"12\">\r\n                        <InputGroup>\r\n                          <FormControl\r\n                            style={{marginLeft: \"auto\", maxWidth: \"300px\", marginRight: \"auto\", color: \"white\", opacity: 0.87, minWidth: \"200px\", minHeight: '50px', backgroundColor: \"#212121\", border: 'none' }}\r\n                            placeholder=\"Enter desired Tagname\"\r\n                            aria-label=\"Enter desired Tagname\"\r\n                            aria-describedby=\"basic-addon1\"\r\n                            className={(tagNameError) ? \"change-tagname-input error-placeholder\" : \"change-tagname-input\"}\r\n                            onChange={(e) => { setNewTagname(e.target.value) }}\r\n                          />\r\n                        </InputGroup>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-2\">\r\n                    <Col className=\"mx-auto text-center pt-1 pb-3\">\r\n                        <span className=\"text-muted font-italic\">Must be 8-24 letters, numbers, dashes or underscores</span>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"pt-2 mt-2\">\r\n                    <Col className=\"text-center\">\r\n                        <Button onClick={() => submit()} variant=\"outline-success\" size=\"lg\" style={{ padding: \"10px\"}}>Submit</Button>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}","import React, { Fragment } from 'react';\r\nimport { Row, Col, Container, Button } from 'react-bootstrap';\r\nimport './settings-modal.css';\r\nimport { Typography } from '@material-ui/core';\r\nimport { DeleteForever } from '@material-ui/icons';\r\nexport default function DeleteAccount({ logoutAccount }) {\r\n    const submit = () => {\r\n        alert(\"You're going to be logged out now...\");\r\n        logoutAccount();\r\n    }\r\n    return (\r\n        <div className=\"settings-modal\">\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col className=\"mx-auto text-center pt-1 pb-3\">\r\n                        <h5>Delete Account</h5>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"mx-auto text-center pt-1 pb-3\"> \r\n                        <Typography className=\"text-warning\">\r\n                            Note that this action is PERMANENT. \r\n                            Once clicked, your encrypted account info, \r\n                            all encrypted messages, encrypted chats, \r\n                            and associated encrypted metadata will be killed. \r\n                            Your email's username and email will be flagged \r\n                            and not allowed for re-application. If more than \r\n                            three deletes come from your IP/user agent, \r\n                            your IP will be flagged and not allowed for re-application.\r\n                            If your account is flagged, reported, or disabled for suspicious content, \r\n                            encrypted data will be warehoused as applicable by the law.\r\n                        </Typography>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"pt-2 mt-2\">\r\n                    <Col className=\"text-center\">\r\n                        <Button onClick={() => submit()} variant=\"outline-danger\" size=\"lg\">DELETE ACCOUNT <DeleteForever></DeleteForever></Button>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}","import React, { Fragment } from 'react';\r\nimport { Row, Col, Container } from 'react-bootstrap';\r\nimport './settings-modal.css';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nexport default function PrivacySecurityDisclaimer() {\r\n    return (\r\n        <div className=\"settings-modal\">\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col className=\"mx-auto text-center pt-1 pb-3\">\r\n                        <h5>Privacy and Security Disclaimers</h5>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"pt-2 pb-2\">\r\n                    <Col className=\"mx-auto text-center text-white\" xs=\"12\">\r\n                    <Typography>\r\n                            Blah blah blah TODO \r\n                    </Typography>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}","import React, { Fragment, useRef } from 'react';\r\nimport { Row, Col, Container, InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport './settings-modal.css';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nexport default function ResetPW({ logoutAccount }) {\r\n    const submit = () => {\r\n        alert(\"You're going to be logged out now...\");\r\n        logoutAccount();\r\n    }\r\n    return (\r\n        <div className=\"settings-modal\">\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col className=\"mx-auto text-center pt-1 pb-3\">\r\n                        <h5>Reset Password</h5>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"mx-auto text-center pt-1 pb-3\">\r\n                        <Typography className=\"text-warning\">Note that this action will log and lock you out, and then send a reset link to your account's listed email.</Typography>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"pt-2 mt-5\">\r\n                    <Col className=\"text-center\">\r\n                        <Button onClick={() => submit()} variant=\"outline-danger\" size=\"lg\">Reset Password</Button>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState, useRef } from 'react';\r\nimport {  Container, Row, Col, Button } from 'react-bootstrap';\r\nimport {\r\n    selectAccount,\r\n    logout,\r\n    clearAccount\r\n} from './accountSettingsSlice';\r\nimport { clearAuth } from '../auth/authSlice';\r\nimport { clearConversations } from '../currentConversation/conversationsSlice';\r\nimport { clearInvites } from '../topbar/inviteSlice';\r\nimport { clearFriends } from '../account/friendsSlice';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setTopbarMessage } from '../uiSlice';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport useWindowSize from '../sidebar/windowSize';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport TransferWithinAStationIcon from '@material-ui/icons/TransferWithinAStation';\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport SecurityIcon from '@material-ui/icons/Security';\r\nimport './settings.css';\r\nimport About from './Modals/About';\r\nimport ChangeTagname from './Modals/ChangeTagname';\r\nimport DeleteAccount from './Modals/DeleteAccount';\r\nimport PrivacySecurityDisclaimer from './Modals/Privacy.Security.Disclaimer';\r\nimport ResetPW from './Modals/ResetPW';\r\nimport { Modal } from '@material-ui/core';\r\n\r\nexport default function Settings(){\r\n    const account = useSelector(selectAccount);\r\n    const dispatch = useDispatch();\r\n    const size = useWindowSize();\r\n    const [success, setSuccess] = useState(false);\r\n    const [error, setError] = useState(false);\r\n    const [errorMsgs, setErrorMsgs] = useState([]);\r\n    const [successMsg, setSuccessMsgs] = useState(\"\");\r\n    const [inputPlaceholder, setInputPlaceholder] = useState(\"\")\r\n    const inputRef = useRef(null);\r\n    const wide = size.width > 768;\r\n    const [aboutOpened, setAboutOpened] = useState(false);\r\n    const [deleteAccOpened, setDeleteAccOpened] = useState(false);\r\n    const [privacyOpened, setPrivacyOpened] = useState(false);\r\n    const [resetPWOpened, setResetPWOpened] = useState(false);\r\n    const [changeTagnameOpened, setChangeTagnameOpened] = useState(false);\r\n\r\n    const logoutAccount = () => {\r\n        dispatch(logout());\r\n        dispatch(clearAccount());\r\n        dispatch(clearAuth());\r\n        dispatch(clearConversations());\r\n        dispatch(clearInvites());\r\n        dispatch(clearFriends());\r\n        console.log(\"Successfully logged out\");\r\n    }\r\n\r\n    const resetPassword = () => {\r\n        setResetPWOpened(true);\r\n    }\r\n\r\n    const changeTagname = () => {\r\n        setChangeTagnameOpened(true);\r\n    }\r\n\r\n    const deleteAccount = () => {\r\n        setDeleteAccOpened(true);\r\n    }\r\n\r\n    const aboutPage = () => {\r\n        setAboutOpened(true);\r\n    }\r\n\r\n    const privacyDisclaimer = () => {\r\n        setPrivacyOpened(true);\r\n    }\r\n    useEffect(() => {\r\n        if(size.width > 768) {\r\n            dispatch(setTopbarMessage((<span><SettingsIcon></SettingsIcon>&nbsp;Account Settings | @{account.tagName}</span>)));\r\n        } else {\r\n            dispatch(setTopbarMessage((<span><SettingsIcon></SettingsIcon> <span className=\"text-primary\">@{account.tagName}</span></span>)));\r\n        }\r\n    }, [size.width]);\r\n    return (\r\n        \r\n        <Container className=\"h-100 w-100\" fluid  style={{ margin: \"auto\", paddingLeft: (wide) ?  \"240px\" : \"0px\" }}>\r\n            <Row className=\"pt-3\">\r\n                <Modal\r\n                    open={aboutOpened}\r\n                    onClose={() => setAboutOpened(false)}\r\n                    aria-labelledby=\"simple-modal-title\"\r\n                    aria-describedby=\"simple-modal-description\"\r\n                >\r\n                    <About></About>\r\n                </Modal>\r\n                <Modal\r\n                    open={changeTagnameOpened}\r\n                    onClose={() => setChangeTagnameOpened(false)}\r\n                    aria-labelledby=\"simple-modal-title\"\r\n                    aria-describedby=\"simple-modal-description\"\r\n                >\r\n                    <ChangeTagname logoutAccount={logoutAccount}></ChangeTagname>\r\n                </Modal>\r\n                <Modal\r\n                    open={deleteAccOpened}\r\n                    onClose={() => setDeleteAccOpened(false)}\r\n                    aria-labelledby=\"simple-modal-title\"\r\n                    aria-describedby=\"simple-modal-description\"\r\n                >\r\n                    <DeleteAccount logoutAccount={logoutAccount}></DeleteAccount>\r\n                </Modal>\r\n                <Modal\r\n                    open={privacyOpened}\r\n                    onClose={() => setPrivacyOpened(false)}\r\n                    aria-labelledby=\"simple-modal-title\"\r\n                    aria-describedby=\"simple-modal-description\"\r\n                >\r\n                    <PrivacySecurityDisclaimer></PrivacySecurityDisclaimer>\r\n                </Modal>\r\n                <Modal\r\n                    open={resetPWOpened}\r\n                    onClose={() => setResetPWOpened(false)}\r\n                    aria-labelledby=\"simple-modal-title\"\r\n                    aria-describedby=\"simple-modal-description\"\r\n                >\r\n                    <ResetPW logoutAccount={logoutAccount}></ResetPW>\r\n                </Modal>\r\n            </Row>\r\n            <Row>\r\n                <Col className=\"mx-auto p-5\" xs=\"8\" style={{ opacity: 0.8, borderRadius: \"10px\", backgroundColor: \"#191919\", maxWidth: \"500px\" }}>\r\n                    <Container fluid>       \r\n                        <Row className=\"mb-2\">\r\n                            <Col className=\"pb-4 text-center lead mx-auto border-bottom border-dark\" xs=\"8\" style={{ opacity: 0.87, color: \"#EEEEEE\", fontSize: \"16pt\"}}>\r\n                                Your Account\r\n                            </Col>           \r\n                        </Row>  \r\n                        <Row className=\"mb-2 mt-1\">\r\n                            <Col className=\"p-2 text-center\" style={{ color: \"#EEEEEE\", opacity: 0.9, fontSize: \"14pt\" }}>\r\n                                <span className=\"text-muted font-italic\">Email:</span>&nbsp;&nbsp;&nbsp;{account.email} \r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"p-2\">\r\n                            <Col className=\"text-center justify-content-around\">\r\n                                <Button onClick={() => resetPassword()} className=\"p-3 m-2 account-button\" variant=\"dark\" style={{ border: \"none\", backgroundColor: \"#202020\", padding: \"15px\", minWidth: \"150px\", maxWidth: \"150px\", minHeight: \"125px\", maxHeight: \"125px\" }} >Reset Password  <LockIcon></LockIcon></Button>\r\n                                <Button onClick={() => changeTagname()} className=\"p-3 m-2 account-button\" variant=\"dark\" style={{ border: \"none\", backgroundColor: \"#202020\", padding: \"15px\", minWidth: \"150px\", maxWidth: \"150px\", minHeight: \"125px\", maxHeight: \"125px\" }} >Change Tagname <TransferWithinAStationIcon></TransferWithinAStationIcon></Button>\r\n                                <Button onClick={() => aboutPage()} className=\"p-3 m-2 account-button\" variant=\"dark\" style={{ border: \"none\", backgroundColor: \"#202020\", padding: \"15px\", minWidth: \"150px\", maxWidth: \"150px\", minHeight: \"125px\", maxHeight: \"125px\" }} >About <InfoIcon></InfoIcon></Button>\r\n                                <Button onClick={() => privacyDisclaimer()} className=\"p-3 m-2 account-button text-warning\" variant=\"dark\" style={{ border: \"none\", backgroundColor: \"#202020\", padding: \"15px\",  minWidth: \"150px\", maxWidth: \"150px\", minHeight: \"125px\", maxHeight: \"125px\" }} >Privacy / Security Disclaimer <SecurityIcon></SecurityIcon></Button>\r\n                                <Button onClick={() => deleteAccount()} className=\"p-3 m-2 account-button text-danger\" variant=\"dark\" style={{ border: \"none\", backgroundColor: \"#202020\", padding: \"15px\", maxWidth: \"150px\", minHeight: \"125px\", maxHeight: \"125px\" }} >Delete Account <DeleteForeverIcon></DeleteForeverIcon></Button>\r\n                            </Col> \r\n                        </Row>\r\n                        <Row>\r\n                            {\r\n                                (success) ?\r\n                                    <Col className=\"text-center text-success lead\">\r\n                                        {successMsg}\r\n                                    </Col> : \"\"\r\n                            }\r\n                        </Row>\r\n                        <Row>\r\n                            {\r\n                                (error) ?\r\n                                <Col>\r\n                                    <ul>\r\n                                        {\r\n                                            errorMsgs.map(msg => {\r\n                                                return <li key={msg} className=\"text-center lead font-italic text-danger settings-error\">{msg}</li>\r\n                                            })\r\n                                        }\r\n                                    </ul>\r\n                                </Col>\r\n                                : \"\"\r\n                            }\r\n                        </Row>\r\n                    </Container>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n      )   \r\n}\r\n","import React from 'react'; \r\nimport Settings from '../account/Settings';\r\nexport default function SettingScreen(){\r\n    return (\r\n      <div className=\"w-100 h-100\">\r\n        <Settings></Settings>\r\n      </div>\r\n    )\r\n  }","import React from 'react';\nimport { Switch, Route, useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport GuardedRoute from './login/loginGuard';\nimport { selectAccount } from './account/accountSettingsSlice';\nimport LoginComponent from './lazyModules/login';\nimport ForgotPW from './lazyModules/forgotPassword';\nimport CreateAcc from './lazyModules/createAccount';\nimport Home from './lazyModules/home';\nimport NewConv from './lazyModules/newConversation'; \nimport SettingScr from './lazyModules/settings';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './App.css';\nimport './index.css';\nimport 'react-pro-sidebar/dist/css/styles.css';\nimport {\n  selectRefreshExpire, \n  setRefreshExpire\n} from './store/store'; \nimport { logout, clearAccount } from './account/accountSettingsSlice'; \nimport { clearAuth } from './auth/authSlice';\nimport { clearConversations } from './currentConversation/conversationsSlice'; \nimport { clearInvites } from './topbar/inviteSlice';\nimport { clearFriends } from './account/friendsSlice';\nimport { CookiesProvider } from 'react-cookie';\n\nexport default function App() {\n  const account = useSelector(selectAccount);\n  const dispatch = useDispatch(); \n  const refreshExpire = useSelector(selectRefreshExpire); \n\n  const now = Date.now(); \n  const history = useHistory();\n\n  const refreshToken = async () => {\n    const refreshResult = await fetch(\"http://localhost:3000/api/auth/refresh\", {\n      credentials: \"include\"\n    });\n    const { successful } = await refreshResult.json(); \n    if(account.loggedIn && successful === true){\n      console.success(\"Refresh token fetch successful\"); \n      dispatch(setRefreshExpire(now + 900000)); \n      return true;\n    } else {\n      console.error(\"Not logged in, not going to attempt refresh. Logging out.\")\n      console.error(\"Refresh token fetch failed. Logging out\"); \n      dispatch(logout());\n      dispatch(clearAccount());\n      dispatch(clearAuth());\n      dispatch(clearConversations());\n      dispatch(clearInvites());\n      dispatch(clearFriends());\n      history.push('/login');\n      return false;\n    }\n  }\n  if(refreshExpire !== -1 && refreshExpire <= now) {\n     refreshToken();\n  }\n\n  return (\n    <CookiesProvider>\n      <Switch>\n        <Route path=\"/login\" component={LoginComponent}></Route>\n        <Route path=\"/forgotPassword\" component={ForgotPW}></Route>\n        <Route path=\"/createAccount\" component={CreateAcc}></Route>\n        <GuardedRoute path=\"/home\" component={Home} auth={account.loggedIn}></GuardedRoute>\n        <GuardedRoute path=\"/newConversation\" component={NewConv} auth={account.loggedIn}></GuardedRoute>\n        <GuardedRoute path=\"/settings\" component={SettingScr} auth={account.loggedIn}></GuardedRoute>\n        <GuardedRoute path=\"/\" component={Home} auth={account.loggedIn}></GuardedRoute>\n      </Switch>\n    </CookiesProvider>\n  )\n}","import React, {useEffect, useState } from 'react';\r\nimport { Row, Col, Button, Dropdown, Container } from 'react-bootstrap';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectAccount } from '../account/accountSettingsSlice';\r\nimport { selectConversations } from '../currentConversation/conversationsSlice';\r\nimport './listitems.css';\r\nimport './topbar.css';\r\nimport { notificationSocket } from '../socket/notificationSocket';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport GroupAddOutlinedIcon from '@material-ui/icons/GroupAddOutlined';\r\nimport NotInterestedOutlinedIcon from '@material-ui/icons/NotInterestedOutlined';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { \r\n    setView,\r\n    setShowConvList, \r\n    setCurrentConversation\r\n} from '../currentConversation/conversationsSlice'; \r\nimport { setTopbarMessage } from '../uiSlice';\r\nimport { chatSocket } from '../socket/chatSocket';\r\nimport useWindowSize from '../sidebar/windowSize';\r\nimport ForumIcon from '@material-ui/icons/Forum';\r\nimport produce from 'immer';\r\n\r\nexport function FriendListItem({ account, currentConversation, isOnline, tagName, conversations, history, dispatch }){\r\n    const size = useWindowSize();\r\n    const friendAction = () => {\r\n        if(conversations.length > 0){\r\n            for(let conv of conversations) {\r\n                //Navigate to the first conversation containing them\r\n                if(conv.pending === false){\r\n                    if(location.pathname !== '/home'){\r\n                        history.push('/home');\r\n                    }\r\n                    if(currentConversation.conversationName === conv.conversationName){\r\n                        dispatch(setView(false)); \r\n                        dispatch(setShowConvList(false));\r\n                        break; \r\n                    }\r\n                    if(conv && conv.conversationName !== '' && size.width > 768 && (currentConversation.conversationName !== conv.conversationName)){\r\n                        dispatch(setTopbarMessage(conv.conversationName));\r\n                    }  \r\n                    if(conv && conv.conversationName !== '' && size.width <= 768 && (currentConversation.conversationName !== conv.conversationName)) {\r\n                        dispatch(setTopbarMessage(\"\")); \r\n                    }\r\n                    dispatch(setView(false))\r\n                    dispatch(setCurrentConversation({ conversation: conv }));\r\n                    dispatch(setShowConvList(false));\r\n                    if(chatSocket){\r\n                        chatSocket.emit('setCurrentConversation', { user: account, conversationId: conv.id }, \r\n                        () => console.log(\"Emitted setCurrentConversation successfully\"));\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        } else {\r\n            if(location.pathname){\r\n                history.push('/newConversation');\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <Container className=\"friend-list-item-row\" fluid>\r\n            <Row className=\"p-3\">\r\n                <Col xs=\"8\" className={`${(isOnline) ? \"text-success\" : \"text-danger\"} py-auto font-italic text-sm text-center my-auto`} style={{ opacity: 0.67 }}>\r\n                    <span className=\"\">@{tagName}</span>\r\n                </Col>\r\n                <Col xs=\"4\" className=\"text-left\">\r\n                    <Button className=\"dropdown-toggle text-white hidden-dropdown-friend-list-item\" variant=\"dark\" style={{ maxWidth: \"50px\", border: \"none\", backgroundColor: \"#303030\"}} onClick={() => friendAction()}><ForumIcon></ForumIcon></Button>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n  }\r\n  \r\nexport function FriendRequestListItem({ requestId, tagName }){\r\n    const account = useSelector(selectAccount);\r\n    const acceptFriendRequest = () => {\r\n        if(notificationSocket){\r\n            console.log(\"Emitted acceptFriendRequest\");\r\n            notificationSocket.emit(\"acceptFriendRequest\", {\r\n                friendRequestId: requestId \r\n            }, () => {\r\n                console.log(\"Successfully emitted accept friend request\");\r\n            });\r\n        }\r\n    }\r\n    return (tagName === account.tagName) ? \"\" : (\r\n        <Row className=\"friend-request-list-item p-2\">\r\n            <Col className=\"text-small text-center my-auto\" style={{ opacity: 0.67 }}>\r\n                Friend request from @{tagName}\r\n            </Col>\r\n            <Col xs=\"5\" className=\"text-center p-2\"  style={{ opacity: 0.67 }}>\r\n                <Button className=\"button-bg mb-1 rounded-pill\" style={{ border: \"none\", color: \"#97fa93\", backgroundColor: \"#191919\", opacity: 0.9 }} onClick={() => { acceptFriendRequest() }}>\r\n                    <Tooltip title=\"Accept\">\r\n                        <GroupAddOutlinedIcon></GroupAddOutlinedIcon>\r\n                    </Tooltip>\r\n                </Button> \r\n                <Button className=\"button-bg rounded-pill\" style={{ border: \"none\", color: \"#bf2700\", backgroundColor: \"#191919\" }} onClick={() => alert(\"Decline friend request\")}>\r\n                    <Tooltip title=\"Decline\">\r\n                        <NotInterestedOutlinedIcon></NotInterestedOutlinedIcon>\r\n                    </Tooltip>\r\n                </Button>\r\n            </Col> \r\n        </Row>\r\n    )\r\n}\r\n  \r\nexport function ReceivedInviteListItem({sender, inviteId, convId }){\r\n    const account = useSelector(selectAccount);\r\n    const sendAccept = () => {\r\n        if(notificationSocket){\r\n            console.log(`Attempting to emit acceptInvite event to server for invite with id ${inviteId}`)\r\n            notificationSocket.emit('acceptInvite', { inviteId: inviteId, conversationId: convId}, () => {\r\n                console.log(`Successfully emitted acceptInvite event to server for invite with id ${inviteId}`)\r\n            });\r\n        }\r\n    }\r\n    return (\r\n        <Row className=\"p-3 invite-hover\">\r\n            <Col className=\"text-small text-muted text-center my-auto\" style={{ opacity: 0.67 }}>\r\n                Chat with {`${sender}`.length > 10 ? `${sender}`.substring(0,7) + '...' : `${sender}` }\r\n            </Col>\r\n\r\n            <Col xs=\"5\" className=\"text-center\"  style={{ opacity: 0.67 }}>\r\n                <Button  className=\"btn-sm mb-1 rounded-pill\" style={{ border: \"none\", color: \"#97fa93\", backgroundColor: \"#191919\", opacity: 0.9 }} onClick={() => { sendAccept() }}>Accept</Button> \r\n                <Button className=\"btn-sm rounded-pill\" style={{ border: \"none\", color: \"#bf2700\", backgroundColor: \"#191919\" }}>Decline</Button>\r\n            </Col>  \r\n        </Row>\r\n    )\r\n}\r\n  \r\nexport function AcceptedInviteListItem({ convId, sender }){\r\n    const conversations = useSelector(selectConversations);\r\n    const [tag, setTag] = useState(\"\");\r\n    useEffect(() => {\r\n        let friend;\r\n        if(conversations && Array.isArray(conversations)) {\r\n            for(let conv of conversations){\r\n                for(let user of conv.users){\r\n                    if(user.id === sender){\r\n                        friend = JSON.parse(JSON.stringify(user));\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if(friend.tagName)\r\n            setTag(friend.tagName);\r\n    }, []);\r\n    const deleteItem = () => {\r\n        alert(\"Todo\")\r\n    }\r\n    return (\r\n        <Row className=\"p-3 accepted-list-item\">\r\n            <Col className=\"text-small text-center my-auto\" style={{ opacity: 0.67 }}>\r\n                Chat with {`${tag}`.length > 10 ? `${tag}`.substring(0,7) + \"...\" : `${tag}`}\r\n            </Col>\r\n            <Col xs=\"5\" className=\"text-center pr-2\"  style={{ opacity: 0.67 }}>\r\n                <Button onClick={() => deleteItem()} className=\"btn-sm mb-1 rounded-pill button-bg\"  style={{ border: \"none\", backgroundColor: \"#191919\", opacity: 0.9 }}>\r\n                    <Tooltip title=\"Delete\">\r\n                        <DeleteOutlineIcon></DeleteOutlineIcon>\r\n                    </Tooltip>\r\n                </Button> \r\n            </Col>  \r\n        </Row>\r\n    )\r\n}","import React, { useState, useRef } from 'react'\r\nimport { Button, Container, Row, Dropdown, Col, FormControl, InputGroup, Tabs, Tab } from 'react-bootstrap'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport './topbar.css'\r\nimport { Badge } from '@material-ui/core'\r\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\r\nimport {\r\n  selectAccount,\r\n  logout,\r\n  clearAccount\r\n} from '../account/accountSettingsSlice';\r\nimport {\r\n  clearConversations,\r\n  selectCurrentConversation,\r\n  selectConversations\r\n} from '../currentConversation/conversationsSlice';\r\nimport {\r\n  selectFriends,\r\n  selectFriendRequests,\r\n  clearFriends\r\n} from '../account/friendsSlice';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { selectToken, clearAuth } from '../auth/authSlice';\r\nimport { selectReceived, acceptedInvites, clearInvites } from './inviteSlice';\r\nimport regex from '../regex'\r\nimport { notificationSocket } from '../socket/notificationSocket'\r\nimport { SearchOutlined } from '@material-ui/icons';\r\nimport { FriendListItem, \r\n        ReceivedInviteListItem, \r\n        AcceptedInviteListItem,\r\n        FriendRequestListItem\r\n      } from './ListItems.js';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport GroupIcon from '@material-ui/icons/Group';\r\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport chatDisconnect from '../socket/chatSocket';\r\nimport notificationsDisconnect from '../socket/notificationSocket';\r\n\r\nexport function FriendsDropdown(){\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const token = useSelector(selectToken);\r\n    const account = useSelector(selectAccount);\r\n    const friends = useSelector(selectFriends);\r\n    const conversations = useSelector(selectConversations);\r\n    const [addFriendInput, setAddFriendInput] = useState(\"\");\r\n    const [searchFriendInput, setSearchFriendInput] = useState(\"\");\r\n    const [successMsg, setSuccessMsg] = useState(\"\");\r\n    const [success, setSuccess] = useState(false);\r\n    const [error, setError] = useState(false);\r\n    const [filteredFriends, setFilteredFriends] = useState(null);\r\n    const [searchError, setSearchError] = useState(false);\r\n    const [addError, setAddError] = useState(false);\r\n    const errorMsgs = useRef([]);\r\n    const currentConversation = useSelector(selectCurrentConversation);\r\n    \r\n    const checkInput = () => {\r\n      let passing = true;\r\n      errorMsgs.current = []\r\n      if(regex.tagNameSearch.test(searchFriendInput) === false){\r\n        passing = false;\r\n        errorMsgs.current.push(\"Invalid friend name\");\r\n      }\r\n      if(account.tagName === searchFriendInput){\r\n        passing = false;\r\n        errorMsgs.current.push(\"Cannot search/send self\");\r\n      }\r\n      if(!passing) setError(true);\r\n      return passing;\r\n    }\r\n\r\n    const checkAddFriendInput = () => {\r\n      let passing = true;\r\n      errorMsgs.current = []\r\n      if(regex.tagName.test(addFriendInput) === false){\r\n        passing = false;\r\n        errorMsgs.current.push(\"Invalid tagname. Try 8-24 letters, numbers, dashes, underscores\");\r\n      }\r\n      if(friends.filter(friend => friend.tagName === addFriendInput).length > 0) {\r\n        passing = false;\r\n        errorMsgs.current.push(\"Friend already exists\");\r\n      }\r\n      if(!passing) setError(true);\r\n      return passing;\r\n    }\r\n\r\n    const searchFriends = () => {\r\n      setError(false);\r\n      setSuccess(false);\r\n      if(!errorMsgs.current || Array.isArray(errorMsgs.current) === false || errorMsgs.current.length !== 0){\r\n        errorMsgs.current = []\r\n      }\r\n      setSearchError(false);\r\n      if(checkInput() === false){\r\n        console.log(\"Error searching friend's list, invalid tag name!\");\r\n        setSearchError(true);\r\n        return;\r\n      }\r\n      console.log(`Filtering friend's list by tagname | ${addFriendInput}`);\r\n      if(friends.length > 1){\r\n        setFilteredFriends(friends.filter(friend => friend.tagName.includes(searchFriendInput) ||\r\n                                          searchFriendInput.includes(friend.tagName))); \r\n      }\r\n    }\r\n\r\n    const sendFriendRequest = async () => {\r\n      setError(false);\r\n      setSuccess(false);\r\n      if(!errorMsgs.current || Array.isArray(errorMsgs.current) === false || errorMsgs.current.length !== 0){\r\n        errorMsgs.current = []\r\n      }\r\n      setAddError(false);\r\n      if(checkAddFriendInput() === false){\r\n        console.log(\"Error cannot send friend request\", errorMsgs);\r\n        setAddError(true)\r\n        return;\r\n      }\r\n      if(token && account && notificationSocket){\r\n          notificationSocket.emit('sendFriendRequest', {\r\n            senderId: account.id,\r\n            recipientId: addFriendInput\r\n          }, () => {\r\n            console.log(`Friend request sent to user @${addFriendInput}`);\r\n          });\r\n        } else {\r\n          console.log(\"Error sending friend request, not connected to notifications socket\");\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Dropdown className=\"ml-3 p-1\" style={{ backgroundColor: \"#191919\" }} >\r\n        <Tooltip title=\"Friends List\">\r\n          <Dropdown.Toggle as=\"button\" style={{ border: \"none\", color: \"white\", backgroundColor: \"#191919\" }} className=\"top-dropdown-button font-weight-bold rounded-pill ml-2\">\r\n              <PeopleAltIcon></PeopleAltIcon>\r\n          </Dropdown.Toggle>\r\n        </Tooltip>\r\n        <Dropdown.Menu style={{ backgroundColor: \"#191919\", minWidth: \"325px\"}} className=\"dropdown-menu-custom-bg\">\r\n        <Dropdown.ItemText className=\"text-center font-weight-bold lead mb-1\" style={{ backgroundColor: \"#191919\", opacity: 0.9, color: \"#AAAAAA\" }}><GroupIcon></GroupIcon>&nbsp;&nbsp;Friends</Dropdown.ItemText>\r\n          <Container fluid className=\"h-100\" style={{ backgroundColor: \"#191919\", minWidth: \"325px\", paddingTop: \"20px\"}}>\r\n            <Row className=\"m-1\">\r\n              <Col xs=\"10\">\r\n                  <InputGroup>\r\n                    <FormControl\r\n                      style={{marginLeft: \"auto\", maxWidth: \"250px\", marginRight: \"auto\", color: \"white\", opacity: 0.87, minWidth: \"200px\", minHeight: '50px', backgroundColor: \"#202020\", border: 'none' }}\r\n                      placeholder=\"Add Friend By Tagname\"\r\n                      aria-label=\"Add Friend By Tagname\"\r\n                      aria-describedby=\"basic-addon1\"\r\n                      className={(addError) ? \"search-friend-bar error-placeholder\" : \"search-friend-bar\"}\r\n                      onChange={(e) => { setAddFriendInput(e.target.value) }}\r\n                    />\r\n                </InputGroup>\r\n              </Col>\r\n              <Col xs=\"2\">\r\n                <Button variant=\"dark\" className=\"mr-3 pr-2\" style={{ display: \"block\", marginRight: \"auto\", marginLeft: \"-15px\", backgroundColor: \"#191919\", border: \"none\", color: \"#555555\" }} onClick={() => sendFriendRequest() } disabled={(addFriendInput.length < 8)}><PersonAddIcon className={(addError) ? \"error-icon\" : \"\"} style={{ height: 30, width: 30, color: \"#AAAAAA\" }}></PersonAddIcon></Button>\r\n              </Col>\r\n            </Row> \r\n            <Row className=\"m-1 mt-2 mb-2 mb-1 pb-3\">\r\n                <Col xs=\"10\">\r\n                    <InputGroup>\r\n                      <FormControl\r\n                        style={{marginLeft: \"auto\", maxWidth: \"250px\", marginRight: \"auto\", color: \"white\", opacity: 0.87, minWidth: \"200px\", minHeight: '50px', backgroundColor: \"#202020\", border: 'none' }}\r\n                        placeholder=\"Search Friends...\"\r\n                        aria-label=\"Search Friends...\"\r\n                        aria-describedby=\"basic-addon1\"\r\n                        className={(searchError) ? \"search-friend-bar error-placeholder\" : \"search-friend-bar\"}\r\n                        onChange={(e) => { setSearchFriendInput(e.target.value) }}\r\n                      />\r\n                  </InputGroup>\r\n                </Col>\r\n                <Col xs=\"2\">\r\n                  <Button variant=\"dark\" style={{  display: \"block\", marginRight: \"auto\", marginLeft: \"-15px\", backgroundColor: \"#191919\", border: \"none\", color: \"#555555\" }} onClick={() => searchFriends() }><SearchOutlined className={(searchError) ? \"error-icon\" : \"\"} style={{ height: 30, width: 30, color: \"#AAAAAA\" }}></SearchOutlined></Button>\r\n                </Col>\r\n              </Row> \r\n              <Row style={{ maxWidth: \"250px\", minWidth: \"250px\", overflowY: \"scroll\", marginRight: \"auto\", marginLeft: \"15px\"}} className=\"mt-1 pb-1\">\r\n                <Col style={{ maxHeight: \"190px\" }}>\r\n                {\r\n                 (Array.isArray(filteredFriends)) ?\r\n                      filteredFriends.map((el) => {\r\n                        const convsWithFriend = []\r\n                        if(conversations && Array.isArray(conversations)) {\r\n                          for(let conv of conversations) {\r\n                             if(conv.users && Array.isArray(conv.users)) {\r\n                               for(let user of conv.users) {\r\n                                   if(user.tagName === el.tagName) {\r\n                                       convsWithFriend.push(conv);\r\n                                       break;\r\n                                   }\r\n                               }\r\n                             }\r\n                          }\r\n                        }\r\n                        if(el && el.tagName){\r\n                          return (\r\n                            <Row key={el.tagName} style={{ maxHeight: \"65px\" , backgroundColor: \"#505050\"}} className=\"friend-topbar\">\r\n                              <FriendListItem \r\n                                account={account} \r\n                                currentConversation={currentConversation} \r\n                                history={history} \r\n                                dispatch={dispatch} \r\n                                conversations={convsWithFriend} \r\n                                key={el.tagName} \r\n                                tagName={el.tagName} \r\n                                isOnline={el.isOnline}>\r\n                              </FriendListItem>\r\n                            </Row>\r\n                          )\r\n                        } else return null;                          \r\n                      })\r\n                  :\r\n                    friends.map((el) => {\r\n                      if(el && el.tagName){\r\n                        const convsWithFriend = []\r\n                        if(conversations && Array.isArray(conversations)) {\r\n                           for(let conv of conversations) {\r\n                              if(conv.users && Array.isArray(conv.users)) {\r\n                                for(let user of conv.users) {\r\n                                    if(user.tagName === el.tagName) {\r\n                                        convsWithFriend.push(conv);\r\n                                        break;\r\n                                    }\r\n                                }\r\n                              }\r\n                           }\r\n                        }\r\n                        return (\r\n                            <Row key={el.tagName} style={{ maxHeight: \"65px\" , backgroundColor: \"#505050\"}} className=\"friend-topbar\">\r\n                              <FriendListItem \r\n                                account={account} \r\n                                currentConversation={currentConversation} \r\n                                history={history} \r\n                                dispatch={dispatch} \r\n                                conversations={convsWithFriend} \r\n                                key={el.tagName} \r\n                                tagName={el.tagName} \r\n                                isOnline={el.isOnline}>\r\n                              </FriendListItem>\r\n                            </Row>\r\n                        )\r\n                      } else return null;                          \r\n                    })\r\n                  }\r\n                </Col>\r\n              </Row>  \r\n          </Container>\r\n          { (error) ? (\r\n          <Container fluid className=\"text-left lead\" style={{ opacity: 0.9 }}>\r\n            <Row className=\"font-italic text-danger\" style={{ margin: \"20px\", borderBottom: \"1px solid red\", opacity: 0.87 }}>\r\n                Errors:\r\n            </Row>  \r\n          <Row>\r\n            <ul>\r\n              {errorMsgs.current.map(el => (<li className=\"text-danger text-small\" key={el}>{el}</li>))}\r\n            </ul>\r\n          </Row>\r\n          </Container>\r\n          ) : \"\" }\r\n          {\r\n            (success) ? (\r\n              <Container fluid className=\"text-left\" style={{ opacity: 0.9 }}>\r\n                <Row className=\"font-italic text-success\" style={{ margin: \"20px\", opacity: 0.87 }}>\r\n                    {successMsg}\r\n                </Row>  \r\n              </Container>\r\n            ) : \"\"\r\n          }\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    );\r\n  }\r\n\r\n\r\n  \r\nexport function NotificationsDropdown() {\r\n    const receivedInvites = useSelector(selectReceived);\r\n    const friendRequests = useSelector(selectFriendRequests);\r\n    const _acceptedInvites = useSelector(acceptedInvites);\r\n    const account = useSelector(selectAccount);\r\n    return (\r\n      <Dropdown className=\"ml-3 p-1 topbar-dropdown\" style={{ backgroundColor: \"#191919\", opacity: 0.95 }} >\r\n          <Tooltip title=\"Notifications\">\r\n            <Dropdown.Toggle as=\"button\" style={{ border: \"none\", color: \"white\", backgroundColor: \"#191919\" }} className=\"top-dropdown-button font-weight-bold rounded-pill ml-2\">\r\n              {\r\n                (receivedInvites.length >= 1 || friendRequests.length >= 1) \r\n                ? \r\n                <Badge color=\"default\" overlap=\"circle\" badgeContent=\" \" variant=\"dot\">\r\n                  <NotificationsIcon></NotificationsIcon>\r\n                </Badge> \r\n                : \r\n                <NotificationsIcon></NotificationsIcon>\r\n              }\r\n            </Dropdown.Toggle>    \r\n          </Tooltip>   \r\n          <Dropdown.Menu className=\"dropdown-menu-custom-bg\" style={{ backgroundColor: \"#191919\", minWidth: \"350px\" }}>\r\n            <Dropdown.ItemText className=\"text-center font-weight-bold lead p-3 pb-2\" style={{ opacity: 0.9, color: \"#AAAAAA\" }}><NotificationsIcon></NotificationsIcon>&nbsp;&nbsp;Notifications</Dropdown.ItemText>\r\n            <Container fluid style={{ maxHeight: \"250px\", minHeight: \"250px\", minWidth: \"250px\", overflowY: \"scroll\"}}>\r\n            <Tabs className=\"tabs-notifications\" defaultActiveKey=\"received\" id=\"uncontrolled-tab-example\">\r\n              <Tab className=\"tab-notifications\" eventKey=\"received\" title=\"Received\">\r\n                {friendRequests.filter(map => map.recipientId === account.id).map((el) => {\r\n                  if(el && el.accepted === false && el.cancelled === false && el.sender.id !== account.id){\r\n                    return (\r\n                      <FriendRequestListItem requestId={el.id} recipientId={el.recipientId} sender={el.sender} tagName={el.sender.tagName} key={`${el.id}`}></FriendRequestListItem>\r\n                    )\r\n                  } else return null;                         \r\n                })}\r\n                {receivedInvites.map((el) => {\r\n                  return (\r\n                    <ReceivedInviteListItem sender={(el.sender) ? el.sender : `${el.senderId}`} key={`${Math.random()}`} convId={`${el.conversationId}`} inviteId={`${el.id}`}></ReceivedInviteListItem>\r\n                  )\r\n                })}\r\n              </Tab>\r\n              <Tab eventKey=\"accepted\" title=\"Accepted\">\r\n                {_acceptedInvites.map((el) => {\r\n                    return (\r\n                      <AcceptedInviteListItem sender={`${el.senderId}`} key={`${Math.random()}`} convId={`${el.conversationId}`} inviteId={`${el.id}`}></AcceptedInviteListItem>\r\n                    )\r\n                  })\r\n                }\r\n              </Tab>\r\n            </Tabs>        \r\n            </Container>            \r\n          </Dropdown.Menu>\r\n      </Dropdown>\r\n    );\r\n}\r\n\r\nexport function SettingsDropdown(){\r\n    const dispatch = useDispatch();\r\n    const logoutAccount = () => {\r\n        dispatch(logout());\r\n        dispatch(clearAccount());\r\n        dispatch(clearAuth());\r\n        dispatch(clearConversations());\r\n        dispatch(clearInvites());\r\n        dispatch(clearFriends());\r\n        console.log(\"Successfully logged out\");\r\n    }\r\n    return (\r\n        <Dropdown className=\"topbar-dropdown\" style={{ backgroundColor: \"#191919\", position: \"relative\", maxWidth: \"100px\", opacity: 0.9 }}>              \r\n            <Dropdown.Toggle className=\"dropdown-toggle text-white\" style={{ border:\" none\", backgroundColor: \"#191919\"}} as=\"button\" id=\"dropdown-custom-2\"><MoreVertIcon></MoreVertIcon></Dropdown.Toggle>\r\n            <Dropdown.Menu className=\"dropdown-menu-custom-bg-settings\" style={{ backgroundColor: \"#191919\", maxWidth: \"100px\" }}>\r\n                <Dropdown.Item  className=\"text-white text-center dropdown-item-settings\" style={{ backgroundColor: \"#404040\", padding: \"15px\" }} as=\"button\" onClick={() => document.querySelector(\"#accountSettings\").click()}><Link id=\"accountSettings\" as=\"button\" style={{ textDecoration: 'none', color: \"#AAAAAA\" }} to=\"/settings\">Account&nbsp;<AccountBoxIcon></AccountBoxIcon></Link></Dropdown.Item>\r\n                <Dropdown.Item  className=\"text-white text-center dropdown-item-settings\" style={{ backgroundColor: \"#404040\", padding: \"15px\"}} as=\"button\" onClick={() => { logoutAccount() }}><Link style={{ textDecoration: 'none', color: \"#AAAAAA\" }} to=\"/login\">Logout&nbsp;<ExitToAppIcon></ExitToAppIcon></Link></Dropdown.Item>\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { Button, Container, Row } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport './topbar.css'\r\nimport useWindowSize from '../sidebar/windowSize';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { useLocation } from 'react-router-dom'\r\nimport ForumIcon from '@material-ui/icons/Forum';\r\nimport {\r\n  selectAccount,\r\n} from '../account/accountSettingsSlice'\r\nimport {\r\n  selectCurrentConversation,\r\n  selectView,\r\n  selectShowConvList,\r\n  setShowConvList,\r\n  setView\r\n} from '../currentConversation/conversationsSlice'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { SettingsDropdown, NotificationsDropdown, FriendsDropdown } from './Dropdowns';\r\nimport { selectTopbarMessage, setTopBarMessage } from '../uiSlice';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n      flexGrow: 1,\r\n      backgroundColor: \"#191919\",\r\n      height: \"100%\",\r\n      opacity: 0.87\r\n    },\r\n    appBar: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      backgroundColor:\"#191919\"\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n      color: \"white\"\r\n    },\r\n    menu : {\r\n      backgroundColor: \"#404040\"\r\n    }\r\n}));\r\n\r\nfunction StartChatButton(){\r\n  const view = useSelector(selectView);\r\n  const showConvList = useSelector(selectShowConvList);\r\n  const dispatch = useDispatch()\r\n  return (\r\n    <div>\r\n      <Link id=\"startChat\" style={{ display: \"none\" }} to=\"/newConversation\"></Link>\r\n      <Button onClick={async () => { \r\n          if(showConvList){\r\n            dispatch(setShowConvList(false));\r\n            //Hides the sidebar\r\n          }\r\n          if(view){\r\n            dispatch(setView(false));\r\n            //Sets the default view to false\r\n          }\r\n          document.getElementById(\"startChat\").click(); \r\n        }} variant=\"primary\" className=\"rounded-pill mx-auto my-form-control-button\" style={{ opacity: 0.75, boxShadow: \"black 5px 5px \" }}>\r\n        <ForumIcon></ForumIcon> Start chat\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function TopBar(){\r\n    const size = useWindowSize()\r\n    const classes = useStyles();\r\n    const account = useSelector(selectAccount);\r\n    const dispatch = useDispatch();\r\n    const screenSmall = size.width < 768;\r\n    const currentConversation = useSelector(selectCurrentConversation);\r\n    const view = useSelector(selectView);\r\n    const showConv = useSelector(selectShowConvList);\r\n    const location = useLocation();\r\n    const topbarMessage = useSelector(selectTopbarMessage);\r\n    return (\r\n        <CssBaseline>\r\n        <AppBar position=\"fixed\"  className={classes.appBar}>\r\n            <Toolbar>\r\n            <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            </IconButton>\r\n            <Typography component={'span'} className={classes.title}>\r\n               <Container fluid>\r\n                  <Row className=\"text-center\">\r\n                    {\r\n                      (account.loggedIn && screenSmall && !showConv) ?\r\n                        (\r\n                          <Button style={{backgroundColor: \"#191919\", border: \"none\"}} onClick={ () => {  dispatch(setShowConvList(!showConv)) }}><ArrowBackIcon></ArrowBackIcon></Button>\r\n                        )\r\n                      : \"\"\r\n                    }   \r\n                    {\r\n                      (account.loggedIn) ? \r\n                          (\r\n                            <>\r\n                              <StartChatButton></StartChatButton>\r\n                              <NotificationsDropdown></NotificationsDropdown>\r\n                              <FriendsDropdown></FriendsDropdown>              \r\n                            </>\r\n                       )\r\n                      : \"\"\r\n                    }\r\n                  </Row>\r\n               </Container>\r\n            </Typography>\r\n\r\n            {\r\n                (size.width > 768)\r\n               ?\r\n                <Typography component={'span'} variant=\"h4\" className={classes.title}>\r\n                    <span style={{ opacity: 0.67 }} className=\"text-white lead\">{topbarMessage}</span>\r\n                </Typography> \r\n                :  \"\"\r\n            }\r\n            \r\n            \r\n            {\r\n              (account.loggedIn === false && location.pathname !== \"/login\") ? (<Link className=\"rounded-pill btn btn-outline-primary mr-5 rounded-pill\" style={{ opacity: 0.67 }} renderas={Button} to=\"/login\">\r\n              Login\r\n            </Link>) : \"\"\r\n            }\r\n            {(account.loggedIn) ? (\r\n              <SettingsDropdown></SettingsDropdown>\r\n            ) : \"\"}\r\n            </Toolbar>\r\n        </AppBar>\r\n        </CssBaseline>\r\n    )\r\n}","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store/store'\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport TopBar from './topbar/TopBar';\n\nReactDOM.render(\n  <div className=\"base-div\" style={{backgroundColor: \"#191919\"}}>\n    <React.StrictMode>\n      <Provider store={store}>\n        <Router basename='/client/'>\n          <Suspense fallback={null}>\n            <TopBar></TopBar>\n            <App />\n          </Suspense>\n        </Router>\n      </Provider>\n    </React.StrictMode>\n  </div>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}